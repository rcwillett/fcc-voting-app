{"version":3,"sources":["app.js","constants/appConstants.js","controllers/createEditPollController.js","controllers/loginController.js","controllers/menuController.js","controllers/pollStatsController.js","controllers/pollViewController.js","controllers/pollsController.js","controllers/userPollsController.js","services/loginService.js","services/notificationService.js","services/pollsService.js","services/userService.js"],"names":["angular","module","run","$rootScope","$location","loginService","notificationService","appConstants","loading","loggedIn","isLoggedIn","then","resp","data","status","$on","event","next","current","$$route","restrictedRoutes","indexOf","originalPath","path","warn","config","$routeProvider","when","templateUrl","controller","createEdit","createEditEnum","create","edit","otherwise","constant","$scope","$timeout","$route","$routeParams","pollService","successfulPollCreation","res","window","location","pollId","failedPollCreation","href","vm","error","errorMessage","message","pollObject","pollName","pollDescription","pollOptions","this","name","description","options","scopeApply","$apply","addOption","errorMsg","length","optionText","pollOptionId","push","optionId","removeOption","splice","forEach","option","index","submitPoll","editPoll","pollTitle","createPoll","getPoll","serverResp","pollInfo","id","submitText","unexpectedError","loginSuccess","loginFail","logInWithGit","login","showError","Boolean","logOutSuccess","failResp","menuVm","logOut","logout","initBarChart","labels","votes","colours","ctx","document","getElementById","getContext","Chart","type","datasets","label","backgroundColor","borderWidth","scales","yAxes","ticks","beginAtZero","responsive","initPieChart","rainbow","numOfSteps","step","r","g","b","h","i","f","q","toString","slice","optionResults","poll","optionNames","optionVotes","optionColors","optionArray","numTimesSelected","getPollSuccess","selectedOption","userSelection","facebookShareLink","encodeURI","twitterShareLink","submitSelection","vote","success","submitNewOption","newOptionForm","newPollOption","$error","required","pattern","addPollOption","newOptionSuccess","requestFailure","newOptionFormVisible","addNewOptionVisible","addNewOption","showNewOptionForm","failure","inputValidationPattern","pollArray","getPolls","pollResult","pollsService","successResp","errorResp","generateStatsLink","generateEditLink","getUserPolls","service","$http","self","get","toastr","msg","fail","warning","method","url","numItems","params","userId","pollObj","getUserInfo"],"mappings":"AACAA,QAAAC,OAAA,WAAA,UAAA,WACAC,KAAA,aAAA,YAAA,eAAA,sBAAA,eAAA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAEAJ,EAAAK,SAAA,EACAL,EAAAM,UAAA,EAEAJ,EAAAK,aAAAC,KAYA,SAAAC,GACAT,EAAAM,SAAAG,EAAAC,KAAAC,OACAX,EAAAK,SAAA,GAGA,SAAAI,GACAT,EAAAM,UAAA,EACAN,EAAAK,SAAA,IAjBAL,EAAAY,IAAA,oBAAA,SAAAC,EAAAC,EAAAC,GACAf,EAAAM,UAGAQ,EAAAE,SAAAZ,EAAAa,iBAAAC,QAAAJ,EAAAE,QAAAG,eAAA,IACAlB,EAAAmB,KAAA,UACAjB,EAAAkB,KAAA,yDAcAC,QAAA,iBAAA,eAAA,SAAAC,EAAAnB,GACAmB,EACAC,KAAA,qBACAC,YAAA,qCACAC,WAAA,uBAEAF,KAAA,eACAC,YAAA,+CACAC,WAAA,2BACAC,WAAAvB,EAAAwB,eAAAC,SAEAL,KAAA,qBACAC,YAAA,+CACAC,WAAA,2BACAC,WAAAvB,EAAAwB,eAAAE,OAEAN,KAAA,sBACAC,YAAA,0CACAC,WAAA,wBAEAF,KAAA,YACAC,YAAA,0CACAC,WAAA,uBAEAF,KAAA,UACAC,YAAA,sCACAC,WAAA,oBAEAK,WACAN,YAAA,qCACAC,WAAA,sBC1DA7B,QAAAC,OAAA,WACAkC,SAAA,gBACAJ,gBACAC,OAAA,EACAC,KAAA,GAEAb,kBAAA,WAAA,cAAA,aAAA,eCNApB,QAAAC,OAAA,WACA4B,WAAA,4BAAA,SAAA,WAAA,SAAA,eAAA,cAAA,eAAA,SAAAO,EAAAC,EAAAC,EAAAC,EAAAC,EAAAjC,GAmEA,SAAAkC,EAAAC,GACAC,OAAAC,SAAA,gBAAAF,EAAA7B,KAAAgC,OAGA,SAAAC,EAAAJ,GACA,MAAAA,EAAA5B,QAAA,MAAA4B,EAAA5B,OACA6B,OAAAC,SAAAG,KAAA,aAGAC,EAAAC,OAAA,EACAD,EAAAE,aAAAR,EAAAS,SAIA,SAAAC,EAAAP,EAAAQ,EAAAC,EAAAC,GACAC,KAAAX,OAAAA,EACAW,KAAAC,KAAAJ,EACAG,KAAAE,YAAAJ,EACAE,KAAAG,QAAAJ,EAGA,SAAAK,IACAvB,EAAA,WAAAD,EAAAyB,WAxFAzB,EAAAY,MACA,IAAAA,EAAAZ,EAAAY,GACAA,EAAAc,UA8BA,WAEA,GADAd,EAAAe,SAAA,GACA,IAAAf,EAAAO,YAAAS,QAAA,KAAAhB,EAAAO,YAAAP,EAAAO,YAAAS,OAAA,GAAAC,WAAA,CACA,IAAAC,EAAAlB,EAAAO,YAAAS,OACAhB,EAAAO,YAAAY,MAAAC,SAAAF,EAAAD,WAAA,UAGAjB,EAAAe,SAAA,uEApCAf,EAAAqB,aAwCA,SAAAD,GACApB,EAAAO,YAAAe,OAAAF,EAAA,GACApB,EAAAO,YAAAgB,QAAA,SAAAC,EAAAC,GACAD,EAAAJ,SAAAK,IAEAb,KA5CAZ,EAAA0B,WA+CA,WACA1B,EAAAe,SAAA,GACAf,EAAAO,YAAAS,OAAA,GAAA1B,EAAApB,QAAAC,QAAAW,aAAAvB,EAAAwB,eAAAE,KACAO,EAAAmC,SAAA,IAAAvB,EAAAJ,EAAAH,OAAAG,EAAA4B,UAAA5B,EAAAM,gBAAAN,EAAAO,cACA5C,KAAA8B,EAAAK,GAEAE,EAAAO,YAAAS,OAAA,EACAxB,EAAAqC,WAAA,IAAAzB,EAAAJ,EAAAH,OAAAG,EAAA4B,UAAA5B,EAAAM,gBAAAN,EAAAO,cACA5C,KAAA8B,EAAAK,GAGAE,EAAAe,SAAA,mDArDAzB,EAAApB,QAAAC,QAAAW,aAAAvB,EAAAwB,eAAAE,KACAO,EAAAsC,QAAAvC,EAAAM,QAAAlC,KACA,SAAAoE,GACA/B,EAAAH,OAAAkC,EAAAlE,KAAAmE,SAAAC,GACAjC,EAAA4B,UAAAG,EAAAlE,KAAAmE,SAAAvB,KACAT,EAAAM,gBAAAyB,EAAAlE,KAAAmE,SAAAtB,YACAV,EAAAO,YAAAwB,EAAAlE,KAAAmE,SAAArB,QACAX,EAAAkC,WAAA,eAEA,SAAAH,GACA/B,EAAAmC,iBAAA,KAKAnC,EAAA4B,UAAA,GACA5B,EAAAM,gBAAA,GACAN,EAAAH,OAAA,KACAG,EAAAO,cAAAa,SAAA,EAAAH,WAAA,KACAjB,EAAAkC,WAAA,kBC9BAlF,QAAAC,OAAA,WACA4B,WAAA,mBAAA,SAAA,aAAA,eAAA,eAAA,SAAAO,EAAAjC,EAAAoC,EAAAlC,GAWA,SAAA+E,EAAAxE,GACAT,EAAAM,UAAA,EACAkC,OAAAC,SAAAG,KAAA,IAGA,SAAAsC,EAAAzE,GACAoC,EAAAC,OAAA,EAhBAb,EAAAY,MACA,IAAAA,EAAAZ,EAAAY,GACAA,EAAAsC,aAIA,WACAjF,EAAAkF,QAAA5E,KAAAyE,EAAAC,IAJArC,EAAAwC,UAAAC,QAAAlD,EAAAU,OACAD,EAAAE,aAAA,oCCNAlD,QAAAC,OAAA,WACA4B,WAAA,kBAAA,SAAA,aAAA,eAAA,SAAAO,EAAAjC,EAAAE,GAUA,SAAAqF,IACAvF,EAAAM,UAAA,EACAkC,OAAAC,SAAAG,KAAA,IAGA,SAAA4C,IACAxF,EAAA8C,OAAA,GAdAb,EAAAwD,WAEAC,OAEA,WACAxF,EAAAyF,SAAAnF,KAAA+E,EAAAC,OCRA3F,QAAAC,OAAA,WACA4B,WAAA,uBAAA,eAAA,SAAA,WAAA,cAAA,SAAAU,EAAAH,EAAAC,EAAAG,GA8BA,SAAAuD,EAAAC,EAAAC,EAAAC,GACA,IAAAC,EAAAC,SAAAC,eAAA,qBAAAC,WAAA,MACA,IAAAC,MAAAJ,GACAK,KAAA,MACA3F,MACAmF,OAAAA,EACAS,WACAC,MAAA,aACA7F,KAAAoF,EACAU,gBAAAT,EACAU,YAAA,KAGAjD,SACAkD,QACAC,QACAC,OACAC,aAAA,GAEAN,MAAA,iBAIAO,YAAA,IAIA,SAAAC,EAAAlB,EAAAC,EAAAC,GACA,IAAAC,EAAAC,SAAAC,eAAA,qBAAAC,WAAA,MACA,IAAAC,MAAAJ,GACAK,KAAA,MACA3F,MACAmF,OAAAA,EACAS,WACAC,MAAA,aACA7F,KAAAoF,EACAU,gBAAAT,EACAU,YAAA,KAGAjD,WAGAsD,YAAA,IAIA,SAAAE,EAAAC,EAAAC,GAIA,IAAAC,EAAAC,EAAAC,EACAC,EAAAJ,EAAAD,EACAM,KAAA,EAAAD,GACAE,EAAA,EAAAF,EAAAC,EACAE,EAAA,EAAAD,EACA,OAAAD,EAAA,GACA,KAAA,EACAJ,EAAA,EACAC,EAAAI,EACAH,EAAA,EACA,MACA,KAAA,EACAF,EAAAM,EACAL,EAAA,EACAC,EAAA,EACA,MACA,KAAA,EACAF,EAAA,EACAC,EAAA,EACAC,EAAAG,EACA,MACA,KAAA,EACAL,EAAA,EACAC,EAAAK,EACAJ,EAAA,EACA,MACA,KAAA,EACAF,EAAAK,EACAJ,EAAA,EACAC,EAAA,EACA,MACA,KAAA,EACAF,EAAA,EACAC,EAAA,EACAC,EAAAI,EAIA,MADA,KAAA,SAAA,IAAAN,IAAAO,SAAA,KAAAC,OAAA,IAAA,SAAA,IAAAP,IAAAM,SAAA,KAAAC,OAAA,IAAA,SAAA,IAAAN,IAAAK,SAAA,KAAAC,OAAA,GArHA1F,EAAAY,MACA,IAAAA,EAAAZ,EAAAY,GACAA,EAAAmC,iBAAA,EACAnC,EAAA+E,iBACA,MAAAxF,EAAAM,QAAA,KAAAN,EAAAM,OACAL,EAAAsC,QAAAvC,EAAAM,QAAAlC,KACA,SAAAoE,GACA/B,EAAAgF,KAAAjD,EAAAlE,KAAAmE,SACA,IAAAiD,KACAC,KACAC,KACAnF,EAAAgF,KAAArE,QAAAY,QAAA,SAAAC,EAAAC,EAAA2D,GACAH,EAAA9D,KAAAK,EAAAP,YACAiE,EAAA/D,KAAAK,EAAA6D,kBACAF,EAAAhE,KAAAgD,EAAAiB,EAAApE,OAAAS,MAEAsB,EAAAkC,EAAAC,EAAAC,GACAjB,EAAAe,EAAAC,EAAAC,GACA9F,EAAA,WAAAD,EAAAyB,YAEA,SAAAkB,GACA/B,EAAAmC,iBAAA,IAKAxC,OAAAC,SAAAG,KAAA,UC5BA/C,QAAAC,OAAA,WACA4B,WAAA,sBAAA,eAAA,SAAA,aAAA,WAAA,cAAA,sBAAA,SAAAU,EAAAH,EAAAjC,EAAAkC,EAAAG,EAAAlC,GA0BA,SAAAgI,EAAAvD,GACA/B,EAAAgF,KAAAjD,EAAAlE,KAAAmE,SACAhC,EAAAuF,eAAAxD,EAAAlE,KAAA2H,cAAAxF,EAAAgF,KAAArE,QAAAoB,EAAAlE,KAAA2H,eAAAxF,EAAAgF,KAAArE,QAAA,GACAX,EAAAyF,kBAAA,gDAAA9F,OAAA+F,UAAA/F,OAAAC,SAAAG,MACAC,EAAA2F,iBAAA,mCAAAhG,OAAA+F,UAAA/F,OAAAC,SAAAG,MAGA,SAAA6F,IACApG,EAAAqG,KAAAtG,EAAAM,OAAAG,EAAAuF,eAAAnE,UACAzD,KAAA,SAAAC,GACAN,EAAAwI,QAAA,iCAIA,SAAAC,IACA3G,EAAA4G,cAAAC,cAAAC,OAAAC,UAAA/G,EAAA4G,cAAAC,cAAAC,OAAAE,SACA5G,EAAA6G,cAAA9G,EAAAM,OAAAG,EAAAiG,eAAAtI,KAAA2I,EAAAC,GAIA,SAAAD,EAAA1I,GACAoC,EAAAwG,sBAAA,EACAxG,EAAAyG,qBAAA,EACAzG,EAAAgF,KAAApH,EAAAC,KAAAA,KACAP,EAAAwI,QAAA,oBAGA,SAAAY,IACAvJ,EAAAM,UACAkJ,IAIA,SAAAA,IACA3G,EAAAwG,sBAAA,EACAxG,EAAAyG,qBAAA,EAGA,SAAAF,EAAA3I,GACAN,EAAAsJ,QAAAhJ,EAAAuC,SAhEAf,EAAAY,MAEA,IAAAA,EAAAZ,EAAAY,GAMAA,EAAAmC,iBAAA,EACAnC,EAAAwG,sBAAA,EACAxG,EAAAyG,qBAAA,EACAzG,EAAA4F,gBAAAA,EACA5F,EAAA+F,gBAAAA,EACA/F,EAAA0G,aAAAA,EACA1G,EAAA6G,uBAAA,cACA7G,EAAAiG,cAAA,GAEA,MAAA1G,EAAAM,QAAA,KAAAN,EAAAM,OACAL,EAAAsC,QAAAvC,EAAAM,QAAAlC,KAAA2H,EAAAiB,GAGA5G,OAAAC,SAAAG,KAAA,UCvBA/C,QAAAC,OAAA,WACA4B,WAAA,kBAAA,SAAA,cAAA,SAAAO,EAAAI,GACAJ,EAAA0H,aACAtH,EAAAuH,SAAA,IAAApJ,KAAA,SAAAqJ,GACA5H,EAAA0H,UAAAE,EAAAnJ,UCJAb,QAAAC,OAAA,WACA4B,WAAA,sBAAA,SAAA,cAAA,SAAAO,EAAA6H,GAiBA,SAAAC,EAAAtJ,GACAoC,EAAA8G,UAAAlJ,EAAAC,KACAmC,EAAAxC,SAAA,EAGA,SAAA2J,EAAAvJ,GACA,MAAAA,EAAAE,QAAA,MAAAF,EAAAE,SACA6B,OAAAC,SAAAG,KAAA,aAvBAX,EAAAY,MACA,IAAAA,EAAAZ,EAAAY,GACAA,EAAAxC,SAAA,EACAwC,EAAAC,OAAA,EACAD,EAAA8G,aAEA9G,EAAAoH,kBAyBA,SAAAvH,GACA,MAAA,eAAAA,GAxBAG,EAAAqH,iBAmBA,SAAAxH,GACA,MAAA,cAAAA,GAfAoH,EAAAK,eAAA3J,KAAAuJ,EAAAC,MCfAnK,QAAAC,OAAA,WACAsK,QAAA,gBAAA,aAAA,QAAA,SAAApK,EAAAqK,GACA,IAAAC,EAAAjH,KAoBA,OAlBAiH,EAAAlF,MAMA,WACA,OAAAiF,EAAAE,IAAA,iBALAD,EAAA3E,OAQA,WACA,OAAA0E,EAAAE,IAAA,YAPAD,EAAA/J,WAUA,WACA,OAAA8J,EAAAE,IAAA,gBAGAD,KCtBAzK,QAAAC,OAAA,WACAsK,QAAA,uBAAA,SAAA,SAAAI,GACA,OACA7B,QAKA,SAAA8B,GACAD,EAAA7B,QAAA8B,IALAhB,QAQA,SAAAgB,GACAD,EAAAE,KAAAD,IARApJ,KAWA,SAAAoJ,GACAD,EAAAG,QAAAF,QCjBA5K,QAAAC,OAAA,WACAsK,QAAA,eAAA,QAAA,SAAAC,GACA,IAAAC,EAAAjH,KAuEA,OArEAiH,EAAA3F,QAAA,SAAAG,GAEA,OAAAuF,GACAO,OAAA,MACAC,IAHA,SAAA/F,KAOAwF,EAAAV,SAAA,SAAAkB,GAEA,OAAAT,GACAO,OAAA,MACAC,IAAA,SACAE,QAJAD,SAAAA,MAQAR,EAAAH,aAAA,SAAAa,GACA,OAAAX,GACAO,OAAA,MACAC,IAAA,gBAIAP,EAAA5F,WAAA,SAAAuG,GAEA,OAAAZ,GACAO,OAAA,OACAC,IAAA,WACAnK,KAJAuK,KAQAX,EAAA9F,SAAA,SAAAyG,GAEA,OAAAZ,GACAO,OAAA,OACAC,IAAA,WACAnK,KAJAuK,KAQAX,EAAApB,cAAA,SAAAxG,EAAAoB,GAMA,OAAAuG,GACAO,OAAA,OACAC,IAAA,iBACAnK,MAPAgC,OAAAA,EACAoB,WAAAA,GAOAuC,KAAA,sBAIAiE,EAAA5B,KAAA,SAAAhG,EAAAuB,GAKA,OAAAoG,GACAO,OAAA,OACAC,IAAA,QACAnK,MANAgC,OAAAA,EACAuB,SAAAA,GAMAoC,KAAA,sBAIAiE,KCzEAzK,QAAAC,OAAA,WACAsK,QAAA,eAAA,QAAA,SAAAC,GACA,IAAAC,EAAAjH,KAYA,OAVAiH,EAAAY,YAEA,WAEA,OAAAb,GACAO,OAAA,MACAC,IAHA,kBAOAP","file":"../js/site.min.js","sourcesContent":["(function() {\n    angular.module(\"pollApp\", [\"ngRoute\", \"toastr\"])\n        .run([\"$rootScope\", \"$location\", \"loginService\", \"notificationService\", \"appConstants\", function($rootScope, $location, loginService, notificationService, appConstants) {\n\n            $rootScope.loading = true;\n            $rootScope.loggedIn = false;\n\n            loginService.isLoggedIn().then(successResp, notLoggedInResp);\n\n            $rootScope.$on(\"$routeChangeStart\", function(event, next, current) {\n                if ($rootScope.loggedIn) {\n                    return;\n                }\n                else if (next.$$route && appConstants.restrictedRoutes.indexOf(next.$$route.originalPath) > -1) {\n                    $location.path(\"/login\");\n                    notificationService.warn(\"You must log in to access this part of the site\");\n                }\n            });\n\n            function successResp(resp) {\n                $rootScope.loggedIn = resp.data.status;\n                $rootScope.loading = false;\n            }\n\n            function notLoggedInResp(resp) {\n                $rootScope.loggedIn = false;\n                $rootScope.loading = false;\n            }\n        }])\n        .config([\"$routeProvider\", \"appConstants\", function($routeProvider, appConstants) {\n            $routeProvider\n                .when(\"/viewPoll/:pollId\", {\n                    templateUrl: \"/public/js/app/templates/poll.html\",\n                    controller: \"pollViewController\"\n                })\n                .when(\"/createPoll\", {\n                    templateUrl: \"/public/js/app/templates/createEditPoll.html\",\n                    controller: \"createEditPollController\",\n                    createEdit: appConstants.createEditEnum.create\n                })\n                .when(\"/editPoll/:pollId\", {\n                    templateUrl: \"/public/js/app/templates/createEditPoll.html\",\n                    controller: \"createEditPollController\",\n                    createEdit: appConstants.createEditEnum.edit\n                })\n                .when(\"/pollStats/:pollId\", {\n                    templateUrl: \"/public/js/app/templates/pollStats.html\",\n                    controller: \"pollStatsController\",\n                })\n                .when(\"/myPolls\", {\n                    templateUrl: \"/public/js/app/templates/userPolls.html\",\n                    controller: \"userPollController\",\n                })\n                .when(\"/login\", {\n                    templateUrl: \"/public/js/app/templates/login.html\",\n                    controller: \"loginController\"\n                })\n                .otherwise({\n                    templateUrl: \"/public/js/app/templates/home.html\",\n                    controller: \"pollController\"\n                });\n        }]);\n}());","(function() {\n    angular.module(\"pollApp\")\n        .constant(\"appConstants\", {\n            createEditEnum: {\n                create: 0,\n                edit: 1\n            },\n            restrictedRoutes: [\"/myPolls\", \"/createPoll\", \"/pollStats\", \"/editPoll\"]\n        });\n}());","(function() {\n    angular.module(\"pollApp\")\n        .controller(\"createEditPollController\", [\"$scope\", \"$timeout\", \"$route\", \"$routeParams\", \"pollService\", \"appConstants\", function createEditPollController($scope, $timeout, $route, $routeParams, pollService, appConstants) {\n            $scope.vm = {};\n            var vm = $scope.vm;\n            vm.addOption = addOption;\n            vm.removeOption = removeOption;\n            vm.submitPoll = submitPoll;\n\n            initData();\n\n            function initData() {\n                if ($route.current.$$route.createEdit === appConstants.createEditEnum.edit) {\n                    pollService.getPoll($routeParams.pollId).then(\n                        function(serverResp) {\n                            vm.pollId = serverResp.data.pollInfo.id\n                            vm.pollTitle = serverResp.data.pollInfo.name\n                            vm.pollDescription = serverResp.data.pollInfo.description;\n                            vm.pollOptions = serverResp.data.pollInfo.options;\n                            vm.submitText = \"Update Poll\";\n                        },\n                        function(serverResp) {\n                            vm.unexpectedError = true;\n                        }\n                    );\n                }\n                else {\n                    vm.pollTitle = \"\";\n                    vm.pollDescription = \"\";\n                    vm.pollId = null;\n                    vm.pollOptions = [{ optionId: 0, optionText: \"\" }];\n                    vm.submitText = \"Create Poll\";\n                }\n            }\n\n            function addOption() {\n                vm.errorMsg = \"\";\n                if (vm.pollOptions.length === 0 || vm.pollOptions[vm.pollOptions.length - 1].optionText !== \"\") {\n                    var pollOptionId = vm.pollOptions.length;\n                    vm.pollOptions.push({ optionId: pollOptionId, optionText: \"\" });\n                }\n                else {\n                    vm.errorMsg = \"The poll option text must not be empty before adding another option\"\n                }\n            }\n\n            function removeOption(optionId) {\n                vm.pollOptions.splice(optionId, 1);\n                vm.pollOptions.forEach(function(option, index) {\n                    option.optionId = index;\n                });\n                scopeApply();\n            }\n\n            function submitPoll() {\n                vm.errorMsg = \"\";\n                if (vm.pollOptions.length > 1 && $route.current.$$route.createEdit === appConstants.createEditEnum.edit) {\n                    pollService.editPoll(new pollObject(vm.pollId, vm.pollTitle, vm.pollDescription, vm.pollOptions))\n                        .then(successfulPollCreation, failedPollCreation);\n                }\n                else if (vm.pollOptions.length > 1) {\n                    pollService.createPoll(new pollObject(vm.pollId, vm.pollTitle, vm.pollDescription, vm.pollOptions))\n                        .then(successfulPollCreation, failedPollCreation);\n                }\n                else {\n                    vm.errorMsg = \"You must have at least one option for your poll\";\n                }\n            }\n\n            function successfulPollCreation(res) {\n                window.location = \"/#!/viewPoll/\" + res.data.pollId;\n            }\n\n            function failedPollCreation(res) {\n                if (res.status === 401 || res.status === 403) {\n                    window.location.href = \"/#!/login\";\n                }\n                else {\n                    vm.error = true;\n                    vm.errorMessage = res.message;\n                }\n            }\n\n            function pollObject(pollId, pollName, pollDescription, pollOptions) {\n                this.pollId = pollId;\n                this.name = pollName;\n                this.description = pollDescription;\n                this.options = pollOptions;\n            }\n\n            function scopeApply() {\n                $timeout(function() { $scope.$apply(); });\n            }\n\n        }]);\n}());\n","(function() {\n    angular.module(\"pollApp\")\n        .controller(\"loginController\", [\"$scope\", \"$rootScope\", \"$routeParams\", \"loginService\", function($scope, $rootScope, $routeParams, loginService) {\n            $scope.vm = {};\n            var vm = $scope.vm;\n            vm.logInWithGit = logInWithGit;\n            vm.showError = Boolean($routeParams.error);\n            vm.errorMessage = \"Login Failed, Please Try Again\";\n\n            function logInWithGit() {\n                loginService.login().then(loginSuccess, loginFail);\n            }\n\n            function loginSuccess(resp) {\n                $rootScope.loggedIn = true;\n                window.location.href = \"/\";\n            }\n\n            function loginFail(resp) {\n                vm.error = true;\n            }\n\n        }]);\n}());\n","(function() {\n    angular.module(\"pollApp\")\n        .controller(\"menuController\", [\"$scope\", \"$rootScope\", \"loginService\", function($scope, $rootScope, loginService) {\n\n            var menuVm = $scope.menuVm = {};\n\n            menuVm.logOut = logOut;\n\n            function logOut() {\n                loginService.logout().then(logOutSuccess, failResp);\n            }\n\n            function logOutSuccess() {\n                $rootScope.loggedIn = false;\n                window.location.href = \"/\";\n            }\n\n            function failResp() {\n                $rootScope.error = true;\n            }\n\n        }]);\n}());\n","(function() {\n    angular.module(\"pollApp\")\n        .controller(\"pollStatsController\", [\"$routeParams\", \"$scope\", \"$timeout\", \"pollService\", function($routeParams, $scope, $timeout, pollService) {\n            $scope.vm = {};\n            var vm = $scope.vm;\n            vm.unexpectedError = false;\n            vm.optionResults = [];\n            if ($routeParams.pollId != null && $routeParams.pollId !== \"\") {\n                pollService.getPoll($routeParams.pollId).then(\n                    function(serverResp) {\n                        vm.poll = serverResp.data.pollInfo;\n                        var optionNames = [];\n                        var optionVotes = [];\n                        var optionColors = [];\n                        vm.poll.options.forEach(function(option, index, optionArray) {\n                            optionNames.push(option.optionText);\n                            optionVotes.push(option.numTimesSelected);\n                            optionColors.push(rainbow(optionArray.length, index));\n                        });\n                        initBarChart(optionNames, optionVotes, optionColors);\n                        initPieChart(optionNames, optionVotes, optionColors);\n                        $timeout(function() { $scope.$apply(); });\n                    },\n                    function(serverResp) {\n                        vm.unexpectedError = true;\n                    }\n                );\n            }\n            else {\n                window.location.href = \"/404\";\n            }\n\n            function initBarChart(labels, votes, colours) {\n                var ctx = document.getElementById(\"bar-chart-results\").getContext('2d');\n                var myChart = new Chart(ctx, {\n                    type: 'bar',\n                    data: {\n                        labels: labels,\n                        datasets: [{\n                            label: '# of Votes',\n                            data: votes,\n                            backgroundColor: colours,\n                            borderWidth: 1\n                        }]\n                    },\n                    options: {\n                        scales: {\n                            yAxes: [{\n                                ticks: {\n                                    beginAtZero: true\n                                },\n                                label: '# of Votes'\n                            }]\n                        }\n                    },\n                    responsive: true\n                });\n            }\n\n            function initPieChart(labels, votes, colours) {\n                var ctx = document.getElementById(\"pie-chart-results\").getContext('2d');\n                var myChart = new Chart(ctx, {\n                    type: 'pie',\n                    data: {\n                        labels: labels,\n                        datasets: [{\n                            label: '# of Votes',\n                            data: votes,\n                            backgroundColor: colours,\n                            borderWidth: 1\n                        }]\n                    },\n                    options: {\n\n                    },\n                    responsive: true\n                });\n            }\n\n            function rainbow(numOfSteps, step) {\n                // This function generates vibrant, \"evenly spaced\" colours (i.e. no clustering). This is ideal for creating easily distinguishable vibrant markers in Google Maps and other apps.\n                // Adam Cole, 2011-Sept-14\n                // HSV to RBG adapted from: http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript\n                var r, g, b;\n                var h = step / numOfSteps;\n                var i = ~~(h * 6);\n                var f = h * 6 - i;\n                var q = 1 - f;\n                switch (i % 6) {\n                    case 0:\n                        r = 1;\n                        g = f;\n                        b = 0;\n                        break;\n                    case 1:\n                        r = q;\n                        g = 1;\n                        b = 0;\n                        break;\n                    case 2:\n                        r = 0;\n                        g = 1;\n                        b = f;\n                        break;\n                    case 3:\n                        r = 0;\n                        g = q;\n                        b = 1;\n                        break;\n                    case 4:\n                        r = f;\n                        g = 0;\n                        b = 1;\n                        break;\n                    case 5:\n                        r = 1;\n                        g = 0;\n                        b = q;\n                        break;\n                }\n                var c = \"#\" + (\"00\" + (~~(r * 255)).toString(16)).slice(-2) + (\"00\" + (~~(g * 255)).toString(16)).slice(-2) + (\"00\" + (~~(b * 255)).toString(16)).slice(-2);\n                return (c);\n            }\n\n        }]);\n}());\n","(function() {\n    angular.module(\"pollApp\")\n        .controller(\"pollViewController\", [\"$routeParams\", \"$scope\", \"$rootScope\", \"$timeout\", \"pollService\", \"notificationService\", function($routeParams, $scope, $rootScope, $timeout, pollService, notificationService) {\n            $scope.vm = {};\n\n            var vm = $scope.vm;\n\n            initViewModel();\n\n            function initViewModel() {\n\n                vm.unexpectedError = false;\n                vm.newOptionFormVisible = false;\n                vm.addNewOptionVisible = true;\n                vm.submitSelection = submitSelection;\n                vm.submitNewOption = submitNewOption;\n                vm.addNewOption = addNewOption;\n                vm.inputValidationPattern = /[a-zA-Z0-9]/;\n                vm.newPollOption = \"\";\n\n                if ($routeParams.pollId != null && $routeParams.pollId !== \"\") {\n                    pollService.getPoll($routeParams.pollId).then(getPollSuccess, requestFailure);\n                }\n                else {\n                    window.location.href = \"/404\";\n                }\n            }\n\n            function getPollSuccess(serverResp) {\n                vm.poll = serverResp.data.pollInfo;\n                vm.selectedOption = serverResp.data.userSelection ? vm.poll.options[serverResp.data.userSelection] : vm.poll.options[0];\n                vm.facebookShareLink = 'https://www.facebook.com/sharer/sharer.php?u=' + window.encodeURI(window.location.href);\n                vm.twitterShareLink = 'https://twitter.com/home?status=' + window.encodeURI(window.location.href);\n            }\n\n            function submitSelection() {\n                pollService.vote($routeParams.pollId, vm.selectedOption.optionId)\n                    .then(function(resp) {\n                        notificationService.success(\"Option Selection Successful\");\n                    });\n            }\n\n            function submitNewOption() {\n                if (!$scope.newOptionForm.newPollOption.$error.required && !$scope.newOptionForm.newPollOption.$error.pattern) {\n                    pollService.addPollOption($routeParams.pollId, vm.newPollOption).then(newOptionSuccess, requestFailure);\n                }\n            }\n\n            function newOptionSuccess(resp) {\n                vm.newOptionFormVisible = false;\n                vm.addNewOptionVisible = false;\n                vm.poll = resp.data.data;\n                notificationService.success(\"New Option Added\");\n            }\n\n            function addNewOption() {\n                if ($rootScope.loggedIn) {\n                    showNewOptionForm();\n                }\n            }\n\n            function showNewOptionForm() {\n                vm.newOptionFormVisible = true;\n                vm.addNewOptionVisible = false;\n            }\n\n            function requestFailure(resp) {\n                notificationService.failure(resp.message);\n            }\n\n        }]);\n}());","(function() {\n    angular.module(\"pollApp\")\n        .controller(\"pollController\", [\"$scope\", \"pollService\", function($scope, pollService) {\n            $scope.pollArray = [];\n            pollService.getPolls(10).then(function(pollResult) {\n                $scope.pollArray = pollResult.data;\n            });\n        }]);\n}());\n","(function() {\n    angular.module(\"pollApp\")\n        .controller(\"userPollController\", [\"$scope\", \"pollService\", function($scope, pollsService) {\n            $scope.vm = {};\n            var vm = $scope.vm;\n            vm.loading = true;\n            vm.error = false;\n            vm.pollArray = [];\n\n            vm.generateStatsLink = generateStatsLink;\n\n            vm.generateEditLink = generateEditLink;\n\n            initData();\n\n            function initData() {\n                pollsService.getUserPolls().then(successResp, errorResp);\n            }\n\n            function successResp(resp) {\n                vm.pollArray = resp.data;\n                vm.loading = false;\n            }\n\n            function errorResp(resp) {\n                if (resp.status === 401 || resp.status === 403) {\n                    window.location.href = \"/#!/login\";\n                }\n            }\n\n            function generateEditLink(pollId) {\n                return '#!editPoll/' + pollId;\n            }\n\n            function generateStatsLink(pollId) {\n                return '#!pollStats/' + pollId;\n            }\n\n        }]);\n}());\n","(function() {\n    angular.module(\"pollApp\")\n        .service(\"loginService\", [\"$rootScope\", \"$http\", function($rootScope, $http) {\n            var self = this;\n\n            self.login = login;\n\n            self.logout = logout;\n\n            self.isLoggedIn = isLoggedIn;\n\n            function login() {\n                return $http.get(\"/auth/github\");\n            }\n\n            function logout() {\n                return $http.get(\"/logout\");\n            }\n\n            function isLoggedIn() {\n                return $http.get(\"/isLoggedIn\");\n            }\n\n            return self;\n        }]);\n}());","(function(){\n    angular.module(\"pollApp\")\n    .service(\"notificationService\", [\"toastr\", function(toastr){\n        return {\n          success: successFunction,\n          failure: failFunction,\n          warn: warnFunction\n        };\n        \n        function successFunction(msg){\n            toastr.success(msg);\n        }\n        \n        function failFunction(msg){\n            toastr.fail(msg);\n        }\n        \n        function warnFunction(msg){\n            toastr.warning(msg);\n        }\n        \n    }]);\n}());","(function() {\n    angular.module(\"pollApp\")\n        .service(\"pollService\", [\"$http\", function($http) {\n            var self = this;\n\n            self.getPoll = function(id) {\n                var url = \"/poll/\" + id;\n                return $http({\n                    method: \"GET\",\n                    url: url\n                });\n            };\n\n            self.getPolls = function(numItems) {\n                var requestObj = { \"numItems\": numItems };\n                return $http({\n                    method: \"GET\",\n                    url: \"/polls\",\n                    params: requestObj\n                });\n            };\n\n            self.getUserPolls = function(userId) {\n                return $http({\n                    method: \"GET\",\n                    url: \"/userPolls\"\n                });\n            };\n\n            self.createPoll = function(pollObj) {\n                var requestData = pollObj;\n                return $http({\n                    method: \"POST\",\n                    url: \"/addPoll\",\n                    data: requestData\n                });\n            };\n\n            self.editPoll = function(pollObj) {\n                var requestData = pollObj;\n                return $http({\n                    method: \"POST\",\n                    url: \"/addPoll\",\n                    data: requestData\n                });\n            };\n\n            self.addPollOption = function(pollId, optionText) {\n                var requestData = {\n                    \"pollId\": pollId,\n                    \"optionText\": optionText\n                };\n\n                return $http({\n                    method: \"POST\",\n                    url: \"/addPollOption\",\n                    data: requestData,\n                    type: \"application/json\"\n                });\n            }\n\n            self.vote = function(pollId, optionId) {\n                var requestData = {\n                    \"pollId\": pollId,\n                    \"optionId\": optionId\n                };\n                return $http({\n                    method: \"POST\",\n                    url: \"/vote\",\n                    data: requestData,\n                    type: \"application/json\"\n                });\n            };\n\n            return self;\n        }]);\n}());\n","(function() {\n    angular.module(\"pollApp\")\n        .service(\"userService\", [\"$http\", function($http) {\n            var self = this;\n\n            self.getUserInfo = getUserInfo;\n\n            function getUserInfo() {\n                var url = \"/getUserInfo\";\n                return $http({\n                    method: \"GET\",\n                    url: url\n                });\n            }\n\n            return self;\n        }]);\n}());\n"]}