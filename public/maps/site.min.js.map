{"version":3,"sources":["app.js","services/loginService.js","services/notificationService.js","services/pollsService.js","services/userService.js","constants/appConstants.js","controllers/createEditPollController.js","controllers/loginController.js","controllers/menuController.js","controllers/pollStatsController.js","controllers/pollViewController.js","controllers/pollsController.js","controllers/userPollsController.js"],"names":["angular","module","run","$rootScope","$location","loginService","notificationService","appConstants","loading","loggedIn","isLoggedIn","then","resp","data","status","$on","event","next","current","$$route","restrictedRoutes","indexOf","originalPath","path","warn","config","$routeProvider","when","templateUrl","controller","createEdit","createEditEnum","create","edit","otherwise","service","$http","this","login","get","logout","toastr","success","msg","error","warning","getPoll","id","method","url","getPolls","numItems","params","getUserPolls","userId","createPoll","pollObj","editPoll","addPollOption","pollId","optionText","type","vote","optionId","getUserInfo","constant","$scope","$timeout","$route","$routeParams","pollService","successfulPollCreation","res","window","location","failedPollCreation","href","vm","errorMessage","message","pollObject","pollName","pollDescription","pollOptions","name","description","options","addOption","errorMsg","length","pollOptionId","push","removeOption","splice","forEach","option","index","$apply","submitPoll","pollTitle","serverResp","pollInfo","submitText","unexpectedError","loginSuccess","loginFail","logInWithGit","showError","Boolean","logOutSuccess","failResp","menuVm","logOut","optionResults","poll","optionNames","optionVotes","optionColors","optionArray","numTimesSelected","numOfSteps","step","r","g","b","h","i","f","q","toString","slice","rainbow","labels","votes","colours","ctx","document","getElementById","getContext","Chart","datasets","label","backgroundColor","borderWidth","scales","yAxes","ticks","beginAtZero","responsive","initBarChart","initPieChart","getPollSuccess","selectedOption","userSelection","facebookShareLink","encodeURI","twitterShareLink","submitSelection","submitNewOption","newOptionForm","newPollOption","$error","required","pattern","newOptionSuccess","requestFailure","newOptionFormVisible","addNewOptionVisible","addNewOption","inputValidationPattern","pollArray","pollResult","pollsService","successResp","errorResp","generateStatsLink","generateEditLink"],"mappings":"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","file":"../js/site.min.js","sourcesContent":["(function() {\n    angular.module(\"pollApp\", [\"ngRoute\", \"toastr\"])\n        .run([\"$rootScope\", \"$location\", \"loginService\", \"notificationService\", \"appConstants\", function($rootScope, $location, loginService, notificationService, appConstants) {\n\n            $rootScope.loading = true;\n            $rootScope.loggedIn = false;\n\n            loginService.isLoggedIn().then(successResp, notLoggedInResp);\n\n            $rootScope.$on(\"$routeChangeStart\", function(event, next, current) {\n                if ($rootScope.loggedIn) {\n                    return;\n                }\n                else if (next.$$route && appConstants.restrictedRoutes.indexOf(next.$$route.originalPath) > -1) {\n                    $location.path(\"/login\");\n                    notificationService.warn(\"You must log in to access this part of the site\");\n                }\n            });\n\n            function successResp(resp) {\n                $rootScope.loggedIn = resp.data.status;\n                $rootScope.loading = false;\n            }\n\n            function notLoggedInResp(resp) {\n                $rootScope.loggedIn = false;\n                $rootScope.loading = false;\n            }\n        }])\n        .config([\"$routeProvider\", \"appConstants\", function($routeProvider, appConstants) {\n            $routeProvider\n                .when(\"/viewPoll/:pollId\", {\n                    templateUrl: \"/public/js/app/templates/poll.html\",\n                    controller: \"pollViewController\"\n                })\n                .when(\"/createPoll\", {\n                    templateUrl: \"/public/js/app/templates/createEditPoll.html\",\n                    controller: \"createEditPollController\",\n                    createEdit: appConstants.createEditEnum.create\n                })\n                .when(\"/editPoll/:pollId\", {\n                    templateUrl: \"/public/js/app/templates/createEditPoll.html\",\n                    controller: \"createEditPollController\",\n                    createEdit: appConstants.createEditEnum.edit\n                })\n                .when(\"/pollStats/:pollId\", {\n                    templateUrl: \"/public/js/app/templates/pollStats.html\",\n                    controller: \"pollStatsController\",\n                })\n                .when(\"/myPolls\", {\n                    templateUrl: \"/public/js/app/templates/userPolls.html\",\n                    controller: \"userPollController\",\n                })\n                .when(\"/login\", {\n                    templateUrl: \"/public/js/app/templates/login.html\",\n                    controller: \"loginController\"\n                })\n                .otherwise({\n                    templateUrl: \"/public/js/app/templates/home.html\",\n                    controller: \"pollController\"\n                });\n        }]);\n}());","(function() {\n    angular.module(\"pollApp\")\n        .service(\"loginService\", [\"$rootScope\", \"$http\", function($rootScope, $http) {\n            var self = this;\n\n            self.login = login;\n\n            self.logout = logout;\n\n            self.isLoggedIn = isLoggedIn;\n\n            function login() {\n                return $http.get(\"/auth/github\");\n            }\n\n            function logout() {\n                return $http.get(\"/logout\");\n            }\n\n            function isLoggedIn() {\n                return $http.get(\"/isLoggedIn\");\n            }\n\n            return self;\n        }]);\n}());","(function(){\n    angular.module(\"pollApp\")\n    .service(\"notificationService\", [\"toastr\", function(toastr){\n        return {\n          success: successFunction,\n          error: errorFunction,\n          warn: warnFunction\n        };\n        \n        function successFunction(msg){\n            toastr.success(msg);\n        }\n        \n        function errorFunction(msg){\n            toastr.error(msg);\n        }\n        \n        function warnFunction(msg){\n            toastr.warning(msg);\n        }\n        \n    }]);\n}());","(function() {\n    angular.module(\"pollApp\")\n        .service(\"pollService\", [\"$http\", function($http) {\n            var self = this;\n\n            self.getPoll = function(id) {\n                var url = \"/poll/\" + id;\n                return $http({\n                    method: \"GET\",\n                    url: url\n                });\n            };\n\n            self.getPolls = function(numItems) {\n                var requestObj = { \"numItems\": numItems };\n                return $http({\n                    method: \"GET\",\n                    url: \"/polls\",\n                    params: requestObj\n                });\n            };\n\n            self.getUserPolls = function(userId) {\n                return $http({\n                    method: \"GET\",\n                    url: \"/userPolls\"\n                });\n            };\n\n            self.createPoll = function(pollObj) {\n                var requestData = pollObj;\n                return $http({\n                    method: \"POST\",\n                    url: \"/addPoll\",\n                    data: requestData\n                });\n            };\n\n            self.editPoll = function(pollObj) {\n                var requestData = pollObj;\n                return $http({\n                    method: \"POST\",\n                    url: \"/addPoll\",\n                    data: requestData\n                });\n            };\n\n            self.addPollOption = function(pollId, optionText) {\n                var requestData = {\n                    \"pollId\": pollId,\n                    \"optionText\": optionText\n                };\n\n                return $http({\n                    method: \"POST\",\n                    url: \"/addPollOption\",\n                    data: requestData,\n                    type: \"application/json\"\n                });\n            }\n\n            self.vote = function(pollId, optionId) {\n                var requestData = {\n                    \"pollId\": pollId,\n                    \"optionId\": optionId\n                };\n                return $http({\n                    method: \"POST\",\n                    url: \"/vote\",\n                    data: requestData,\n                    type: \"application/json\"\n                });\n            };\n\n            return self;\n        }]);\n}());\n","(function() {\n    angular.module(\"pollApp\")\n        .service(\"userService\", [\"$http\", function($http) {\n            var self = this;\n\n            self.getUserInfo = getUserInfo;\n\n            function getUserInfo() {\n                var url = \"/getUserInfo\";\n                return $http({\n                    method: \"GET\",\n                    url: url\n                });\n            }\n\n            return self;\n        }]);\n}());\n","(function() {\n    angular.module(\"pollApp\")\n        .constant(\"appConstants\", {\n            createEditEnum: {\n                create: 0,\n                edit: 1\n            },\n            restrictedRoutes: [\"/myPolls\", \"/createPoll\", \"/pollStats\", \"/editPoll\"]\n        });\n}());","(function() {\n    angular.module(\"pollApp\")\n        .controller(\"createEditPollController\", [\"$scope\", \"$timeout\", \"$route\", \"$routeParams\", \"pollService\", \"appConstants\", \"notificationService\", createEditPollController]);\n\n    function createEditPollController($scope, $timeout, $route, $routeParams, pollService, appConstants, notificationService) {\n        $scope.vm = {};\n        var vm = $scope.vm;\n        vm.addOption = addOption;\n        vm.removeOption = removeOption;\n        vm.submitPoll = submitPoll;\n\n        initData();\n\n        function initData() {\n            if ($route.current.$$route.createEdit === appConstants.createEditEnum.edit) {\n                pollService.getPoll($routeParams.pollId).then(\n                    function(serverResp) {\n                        vm.pollId = serverResp.data.pollInfo.id\n                        vm.pollTitle = serverResp.data.pollInfo.name\n                        vm.pollDescription = serverResp.data.pollInfo.description;\n                        vm.pollOptions = serverResp.data.pollInfo.options;\n                        vm.submitText = \"Update Poll\";\n                    },\n                    function(serverResp) {\n                        vm.unexpectedError = true;\n                    }\n                );\n            }\n            else {\n                vm.pollTitle = \"\";\n                vm.pollDescription = \"\";\n                vm.pollId = null;\n                vm.pollOptions = [{ optionId: 0, optionText: \"\" }];\n                vm.submitText = \"Create Poll\";\n            }\n        }\n\n        function addOption() {\n            vm.errorMsg = \"\";\n            if (vm.pollOptions.length === 0 || vm.pollOptions[vm.pollOptions.length - 1].optionText !== \"\") {\n                var pollOptionId = vm.pollOptions.length;\n                vm.pollOptions.push({ optionId: pollOptionId, optionText: \"\" });\n            }\n            else {\n                notificationService.error(\"The poll option text must not be empty before adding another option\");\n            }\n        }\n\n        function removeOption(optionId) {\n            vm.pollOptions.splice(optionId, 1);\n            vm.pollOptions.forEach(function(option, index) {\n                option.optionId = index;\n            });\n            scopeApply();\n        }\n\n        function submitPoll() {\n            vm.errorMsg = \"\";\n            if (vm.pollOptions.length > 2 && $route.current.$$route.createEdit === appConstants.createEditEnum.edit) {\n                pollService.editPoll(new pollObject(vm.pollId, vm.pollTitle, vm.pollDescription, vm.pollOptions))\n                    .then(successfulPollCreation, failedPollCreation);\n            }\n            else if (vm.pollOptions.length > 2 && vm.pollTitle) {\n                pollService.createPoll(new pollObject(vm.pollId, vm.pollTitle, vm.pollDescription, vm.pollOptions))\n                    .then(successfulPollCreation, failedPollCreation);\n            }\n            else {\n                notificationService.error(\"You must have at least two options for your poll and a title\");\n            }\n        }\n\n        function successfulPollCreation(res) {\n            window.location = \"/#!/viewPoll/\" + res.data.pollId;\n        }\n\n        function failedPollCreation(res) {\n            if (res.status === 401 || res.status === 403) {\n                window.location.href = \"/#!/login\";\n            }\n            else {\n                vm.error = true;\n                vm.errorMessage = res.message;\n            }\n        }\n\n        function pollObject(pollId, pollName, pollDescription, pollOptions) {\n            this.pollId = pollId;\n            this.name = pollName;\n            this.description = pollDescription;\n            this.options = pollOptions;\n        }\n\n        function scopeApply() {\n            $timeout(function() { $scope.$apply(); });\n        }\n\n    }\n}());\n","(function() {\n    angular.module(\"pollApp\")\n        .controller(\"loginController\", [\"$scope\", \"$rootScope\", \"$routeParams\", \"loginService\", function($scope, $rootScope, $routeParams, loginService) {\n            $scope.vm = {};\n            var vm = $scope.vm;\n            vm.logInWithGit = logInWithGit;\n            vm.showError = Boolean($routeParams.error);\n            vm.errorMessage = \"Login Failed, Please Try Again\";\n\n            function logInWithGit() {\n                loginService.login().then(loginSuccess, loginFail);\n            }\n\n            function loginSuccess(resp) {\n                $rootScope.loggedIn = true;\n                window.location.href = \"/\";\n            }\n\n            function loginFail(resp) {\n                vm.error = true;\n            }\n\n        }]);\n}());\n","(function() {\n    angular.module(\"pollApp\")\n        .controller(\"menuController\", [\"$scope\", \"$rootScope\", \"loginService\", function($scope, $rootScope, loginService) {\n\n            var menuVm = $scope.menuVm = {};\n\n            menuVm.logOut = logOut;\n\n            function logOut() {\n                loginService.logout().then(logOutSuccess, failResp);\n            }\n\n            function logOutSuccess() {\n                $rootScope.loggedIn = false;\n                window.location.href = \"/\";\n            }\n\n            function failResp() {\n                $rootScope.error = true;\n            }\n\n        }]);\n}());\n","(function() {\n    angular.module(\"pollApp\")\n        .controller(\"pollStatsController\", [\"$routeParams\", \"$scope\", \"$timeout\", \"pollService\", function($routeParams, $scope, $timeout, pollService) {\n            $scope.vm = {};\n            var vm = $scope.vm;\n            vm.unexpectedError = false;\n            vm.optionResults = [];\n            if ($routeParams.pollId != null && $routeParams.pollId !== \"\") {\n                pollService.getPoll($routeParams.pollId).then(\n                    function(serverResp) {\n                        vm.poll = serverResp.data.pollInfo;\n                        var optionNames = [];\n                        var optionVotes = [];\n                        var optionColors = [];\n                        vm.poll.options.forEach(function(option, index, optionArray) {\n                            optionNames.push(option.optionText);\n                            optionVotes.push(option.numTimesSelected);\n                            optionColors.push(rainbow(optionArray.length, index));\n                        });\n                        initBarChart(optionNames, optionVotes, optionColors);\n                        initPieChart(optionNames, optionVotes, optionColors);\n                        $timeout(function() { $scope.$apply(); });\n                    },\n                    function(serverResp) {\n                        vm.unexpectedError = true;\n                    }\n                );\n            }\n            else {\n                window.location.href = \"/404\";\n            }\n\n            function initBarChart(labels, votes, colours) {\n                var ctx = document.getElementById(\"bar-chart-results\").getContext('2d');\n                var myChart = new Chart(ctx, {\n                    type: 'bar',\n                    data: {\n                        labels: labels,\n                        datasets: [{\n                            label: '# of Votes',\n                            data: votes,\n                            backgroundColor: colours,\n                            borderWidth: 1\n                        }]\n                    },\n                    options: {\n                        scales: {\n                            yAxes: [{\n                                ticks: {\n                                    beginAtZero: true\n                                },\n                                label: '# of Votes'\n                            }]\n                        }\n                    },\n                    responsive: true\n                });\n            }\n\n            function initPieChart(labels, votes, colours) {\n                var ctx = document.getElementById(\"pie-chart-results\").getContext('2d');\n                var myChart = new Chart(ctx, {\n                    type: 'pie',\n                    data: {\n                        labels: labels,\n                        datasets: [{\n                            label: '# of Votes',\n                            data: votes,\n                            backgroundColor: colours,\n                            borderWidth: 1\n                        }]\n                    },\n                    options: {\n\n                    },\n                    responsive: true\n                });\n            }\n\n            function rainbow(numOfSteps, step) {\n                // This function generates vibrant, \"evenly spaced\" colours (i.e. no clustering). This is ideal for creating easily distinguishable vibrant markers in Google Maps and other apps.\n                // Adam Cole, 2011-Sept-14\n                // HSV to RBG adapted from: http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript\n                var r, g, b;\n                var h = step / numOfSteps;\n                var i = ~~(h * 6);\n                var f = h * 6 - i;\n                var q = 1 - f;\n                switch (i % 6) {\n                    case 0:\n                        r = 1;\n                        g = f;\n                        b = 0;\n                        break;\n                    case 1:\n                        r = q;\n                        g = 1;\n                        b = 0;\n                        break;\n                    case 2:\n                        r = 0;\n                        g = 1;\n                        b = f;\n                        break;\n                    case 3:\n                        r = 0;\n                        g = q;\n                        b = 1;\n                        break;\n                    case 4:\n                        r = f;\n                        g = 0;\n                        b = 1;\n                        break;\n                    case 5:\n                        r = 1;\n                        g = 0;\n                        b = q;\n                        break;\n                }\n                var c = \"#\" + (\"00\" + (~~(r * 255)).toString(16)).slice(-2) + (\"00\" + (~~(g * 255)).toString(16)).slice(-2) + (\"00\" + (~~(b * 255)).toString(16)).slice(-2);\n                return (c);\n            }\n\n        }]);\n}());\n","(function() {\n    angular.module(\"pollApp\")\n        .controller(\"pollViewController\", [\"$routeParams\", \"$scope\", \"$rootScope\", \"$timeout\", \"pollService\", \"notificationService\", function($routeParams, $scope, $rootScope, $timeout, pollService, notificationService) {\n            $scope.vm = {};\n\n            var vm = $scope.vm;\n\n            initViewModel();\n\n            function initViewModel() {\n\n                vm.unexpectedError = false;\n                vm.newOptionFormVisible = false;\n                vm.addNewOptionVisible = true;\n                vm.submitSelection = submitSelection;\n                vm.submitNewOption = submitNewOption;\n                vm.addNewOption = addNewOption;\n                vm.inputValidationPattern = /[a-zA-Z0-9]/;\n                vm.newPollOption = \"\";\n\n                if ($routeParams.pollId != null && $routeParams.pollId !== \"\") {\n                    pollService.getPoll($routeParams.pollId).then(getPollSuccess, requestFailure);\n                }\n                else {\n                    window.location.href = \"/404\";\n                }\n            }\n\n            function getPollSuccess(serverResp) {\n                vm.poll = serverResp.data.pollInfo;\n                vm.selectedOption = serverResp.data.userSelection ? vm.poll.options[serverResp.data.userSelection] : vm.poll.options[0];\n                vm.facebookShareLink = 'https://www.facebook.com/sharer/sharer.php?u=' + window.encodeURI(window.location.href);\n                vm.twitterShareLink = 'https://twitter.com/home?status=' + window.encodeURI(window.location.href);\n            }\n\n            function submitSelection() {\n                pollService.vote($routeParams.pollId, vm.selectedOption.optionId)\n                    .then(function(resp) {\n                        notificationService.success(\"Option Selection Successful\");\n                    });\n            }\n\n            function submitNewOption() {\n                if (!$scope.newOptionForm.newPollOption.$error.required && !$scope.newOptionForm.newPollOption.$error.pattern) {\n                    pollService.addPollOption($routeParams.pollId, vm.newPollOption).then(newOptionSuccess, requestFailure);\n                }\n            }\n\n            function newOptionSuccess(resp) {\n                vm.newOptionFormVisible = false;\n                vm.addNewOptionVisible = false;\n                vm.poll = resp.data.data;\n                notificationService.success(\"New Option Added\");\n            }\n\n            function addNewOption() {\n                if ($rootScope.loggedIn) {\n                    showNewOptionForm();\n                }\n            }\n\n            function showNewOptionForm() {\n                vm.newOptionFormVisible = true;\n                vm.addNewOptionVisible = false;\n            }\n\n            function requestFailure(resp) {\n                notificationService.error(resp.message);\n            }\n\n        }]);\n}());","(function() {\n    angular.module(\"pollApp\")\n        .controller(\"pollController\", [\"$scope\", \"pollService\", function($scope, pollService) {\n            $scope.pollArray = [];\n            pollService.getPolls(10).then(function(pollResult) {\n                $scope.pollArray = pollResult.data;\n            });\n        }]);\n}());\n","(function() {\n    angular.module(\"pollApp\")\n        .controller(\"userPollController\", [\"$scope\", \"pollService\", function($scope, pollsService) {\n            $scope.vm = {};\n            var vm = $scope.vm;\n            vm.loading = true;\n            vm.error = false;\n            vm.pollArray = [];\n\n            vm.generateStatsLink = generateStatsLink;\n\n            vm.generateEditLink = generateEditLink;\n\n            initData();\n\n            function initData() {\n                pollsService.getUserPolls().then(successResp, errorResp);\n            }\n\n            function successResp(resp) {\n                vm.pollArray = resp.data;\n                vm.loading = false;\n            }\n\n            function errorResp(resp) {\n                if (resp.status === 401 || resp.status === 403) {\n                    window.location.href = \"/#!/login\";\n                }\n            }\n\n            function generateEditLink(pollId) {\n                return '#!editPoll/' + pollId;\n            }\n\n            function generateStatsLink(pollId) {\n                return '#!pollStats/' + pollId;\n            }\n\n        }]);\n}());\n"]}