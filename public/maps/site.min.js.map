{"version":3,"sources":["app.js","constants/appConstants.js","controllers/createEditPollController.js","controllers/loginController.js","controllers/menuController.js","controllers/pollStatsController.js","controllers/pollViewController.js","controllers/pollsController.js","controllers/userPollsController.js","services/loginService.js","services/notificationService.js","services/pollsService.js","services/userService.js","option.js","poll.js","pollInfo.js","userSelection.js"],"names":["angular","module","run","$rootScope","$location","loginService","notificationService","appConstants","loading","loggedIn","isLoggedIn","then","resp","data","status","$on","event","next","current","$$route","restrictedRoutes","indexOf","originalPath","path","warn","config","$routeProvider","when","templateUrl","controller","createEdit","createEditEnum","create","edit","otherwise","constant","$scope","$timeout","$route","$routeParams","OptionModel","PollModel","pollService","successfulPollCreation","res","window","location","pollId","failedPollCreation","href","error","message","pollObject","pollName","pollDescription","pollOptions","call","this","vm","addOption","allOptionsNonEmpty","index","length","optionText","validateOptions","addOptionError","pollOptionId","push","optionId","removeOption","splice","forEach","option","submitPoll","editPoll","pollTitle","createPoll","getPoll","serverResp","pollInfo","id","name","description","options","submitText","unexpectedError","loginSuccess","loginFail","logInWithGit","login","showError","Boolean","errorMessage","logOutSuccess","failResp","menuVm","logOut","logout","optionResults","poll","optionNames","optionVotes","optionColors","optionArray","numTimesSelected","numOfSteps","step","r","g","b","h","i","f","q","toString","slice","rainbow","labels","votes","colours","ctx","document","getElementById","getContext","Chart","type","datasets","label","backgroundColor","borderWidth","scales","yAxes","ticks","beginAtZero","responsive","initBarChart","initPieChart","$apply","getPollSuccess","selectedOption","userSelection","facebookShareLink","encodeURI","twitterShareLink","submitSelection","vote","success","submitNewOption","newOptionForm","newPollOption","$error","required","pattern","addPollOption","newOptionSuccess","requestFailure","newOptionFormVisible","addNewOptionVisible","addNewOption","inputValidationPattern","pollArray","getPolls","pollResult","pollsService","successResp","errorResp","generateStatsLink","generateEditLink","getUserPolls","service","$http","get","toastr","msg","warning","method","url","numItems","params","userId","pollObj","getUserInfo","exports","factory","PollOptionModel","require","creatorId","creatorUserName","creator","userName","initOptions","result","initOption","initializeOptions","PollInfo","UserSelection","uuid","userOption"],"mappings":"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","file":"../js/site.min.js","sourcesContent":["(function() {\n    angular.module(\"pollApp\", [\"ngRoute\", \"toastr\"])\n        .run([\"$rootScope\", \"$location\", \"loginService\", \"notificationService\", \"appConstants\", function($rootScope, $location, loginService, notificationService, appConstants) {\n\n            $rootScope.loading = true;\n            $rootScope.loggedIn = false;\n\n            loginService.isLoggedIn().then(successResp, notLoggedInResp);\n\n            $rootScope.$on(\"$routeChangeStart\", function(event, next, current) {\n                if ($rootScope.loggedIn) {\n                    return;\n                }\n                else if (next.$$route && appConstants.restrictedRoutes.indexOf(next.$$route.originalPath) > -1) {\n                    $location.path(\"/login\");\n                    notificationService.warn(\"You must log in to access this part of the site\");\n                }\n            });\n\n            function successResp(resp) {\n                $rootScope.loggedIn = resp.data.status;\n                $rootScope.loading = false;\n            }\n\n            function notLoggedInResp(resp) {\n                $rootScope.loggedIn = false;\n                $rootScope.loading = false;\n            }\n        }])\n        .config([\"$routeProvider\", \"appConstants\", function($routeProvider, appConstants) {\n            $routeProvider\n                .when(\"/viewPoll/:pollId\", {\n                    templateUrl: \"/public/js/app/templates/poll.html\",\n                    controller: \"pollViewController\"\n                })\n                .when(\"/createPoll\", {\n                    templateUrl: \"/public/js/app/templates/createEditPoll.html\",\n                    controller: \"createEditPollController\",\n                    createEdit: appConstants.createEditEnum.create\n                })\n                .when(\"/editPoll/:pollId\", {\n                    templateUrl: \"/public/js/app/templates/createEditPoll.html\",\n                    controller: \"createEditPollController\",\n                    createEdit: appConstants.createEditEnum.edit\n                })\n                .when(\"/pollStats/:pollId\", {\n                    templateUrl: \"/public/js/app/templates/pollStats.html\",\n                    controller: \"pollStatsController\",\n                })\n                .when(\"/myPolls\", {\n                    templateUrl: \"/public/js/app/templates/userPolls.html\",\n                    controller: \"userPollController\",\n                })\n                .when(\"/login\", {\n                    templateUrl: \"/public/js/app/templates/login.html\",\n                    controller: \"loginController\"\n                })\n                .otherwise({\n                    templateUrl: \"/public/js/app/templates/home.html\",\n                    controller: \"pollController\"\n                });\n        }]);\n}());","(function() {\n    angular.module(\"pollApp\")\n        .constant(\"appConstants\", {\n            createEditEnum: {\n                create: 0,\n                edit: 1\n            },\n            restrictedRoutes: [\"/myPolls\", \"/createPoll\", \"/pollStats\", \"/editPoll\"]\n        });\n}());","(function() {\n    angular.module(\"pollApp\")\n        .controller(\"createEditPollController\", [\"$scope\", \"$timeout\", \"$route\", \"$routeParams\", \"OptionModel\", \"PollModel\", \"pollService\", \"appConstants\", \"notificationService\", createEditPollController]);\n\n    function createEditPollController($scope, $timeout, $route, $routeParams, OptionModel, PollModel, pollService, appConstants, notificationService) {\n        $scope.vm = {};\n        var vm = $scope.vm;\n        vm.addOption = addOption;\n        vm.addOptionError = false;\n        vm.removeOption = removeOption;\n        vm.submitPoll = submitPoll;\n\n        initData();\n\n        function initData() {\n            if ($route.current.$$route.createEdit === appConstants.createEditEnum.edit) {\n                pollService.getPoll($routeParams.pollId).then(\n                    function(serverResp) {\n                        vm.pollId = serverResp.data.pollInfo.id\n                        vm.pollTitle = serverResp.data.pollInfo.name\n                        vm.pollDescription = serverResp.data.pollInfo.description;\n                        vm.pollOptions = serverResp.data.pollInfo.options;\n                        vm.submitText = \"Update Poll\";\n                    },\n                    function(serverResp) {\n                        vm.unexpectedError = true;\n                    }\n                );\n            }\n            else {\n                vm.pollTitle = \"\";\n                vm.pollDescription = \"\";\n                vm.pollId = null;\n                vm.pollOptions = [new OptionModel(0, \"\", 0)];\n                vm.submitText = \"Create Poll\";\n            }\n        }\n\n        function addOption() {\n            var allOptionsNonEmpty = validateOptions();\n            \n            vm.addOptionError = false;\n            \n            if (vm.pollOptions.length === 0 || allOptionsNonEmpty) {\n                var pollOptionId = vm.pollOptions.length;\n                vm.pollOptions.push({ optionId: pollOptionId, optionText: \"\" });\n            }\n            else {\n                vm.addOptionError = true;\n                notificationService.error(\"Form error. Please ensure the form fields are filled correctly\");\n            }\n        }\n\n        function removeOption(optionId) {\n            vm.pollOptions.splice(optionId, 1);\n            vm.pollOptions.forEach(function(option, index) {\n                option.optionId = index;\n            });\n        }\n\n        function submitPoll() {\n            if (vm.pollOptions.length > 1 && $route.current.$$route.createEdit === appConstants.createEditEnum.edit) {\n                pollService.editPoll(new pollObject(vm.pollId, vm.pollTitle, vm.pollDescription, vm.pollOptions))\n                    .then(successfulPollCreation, failedPollCreation);\n            }\n            else if (vm.pollOptions.length > 1 && vm.pollTitle) {\n                pollService.createPoll(new pollObject(vm.pollId, vm.pollTitle, vm.pollDescription, vm.pollOptions))\n                    .then(successfulPollCreation, failedPollCreation);\n            }\n            else {\n                notificationService.error(\"Form Error. Please ensure the form fields are filled correctly.\");\n            }\n        }\n\n        function successfulPollCreation(res) {\n            window.location = \"/#!/viewPoll/\" + res.data.pollId;\n        }\n\n        function failedPollCreation(res) {\n            if (res.status === 401 || res.status === 403) {\n                window.location.href = \"/#!/login\";\n            }\n            else {\n                notificationService.error(res.message);\n            }\n        }\n        \n        function validateOptions(){\n            for (var index = 0; index < vm.pollOptions.length; index++){\n                if (!vm.pollOptions[index].optionText) {\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        function pollObject(pollId, pollName, pollDescription, pollOptions) {\n            PollModel.call(this, pollName, pollDescription, \"\", \"\", pollOptions)\n            this.pollId = pollId;\n        }\n\n        function scopeApply() {\n            $timeout(function() { $scope.$apply(); });\n        }\n\n    }\n}());\n","(function() {\n    angular.module(\"pollApp\")\n        .controller(\"loginController\", [\"$scope\", \"$rootScope\", \"$routeParams\", \"loginService\", function($scope, $rootScope, $routeParams, loginService) {\n            $scope.vm = {};\n            var vm = $scope.vm;\n            vm.logInWithGit = logInWithGit;\n            vm.showError = Boolean($routeParams.error);\n            vm.errorMessage = \"Login Failed, Please Try Again\";\n\n            function logInWithGit() {\n                loginService.login().then(loginSuccess, loginFail);\n            }\n\n            function loginSuccess(resp) {\n                $rootScope.loggedIn = true;\n                window.location.href = \"/\";\n            }\n\n            function loginFail(resp) {\n                vm.error = true;\n            }\n\n        }]);\n}());\n","(function() {\n    angular.module(\"pollApp\")\n        .controller(\"menuController\", [\"$scope\", \"$rootScope\", \"loginService\", function($scope, $rootScope, loginService) {\n\n            var menuVm = $scope.menuVm = {};\n\n            menuVm.logOut = logOut;\n\n            function logOut() {\n                loginService.logout().then(logOutSuccess, failResp);\n            }\n\n            function logOutSuccess() {\n                $rootScope.loggedIn = false;\n                window.location.href = \"/\";\n            }\n\n            function failResp() {\n                $rootScope.error = true;\n            }\n\n        }]);\n}());\n","(function() {\n    angular.module(\"pollApp\")\n        .controller(\"pollStatsController\", [\"$routeParams\", \"$scope\", \"$timeout\", \"pollService\", function($routeParams, $scope, $timeout, pollService) {\n            $scope.vm = {};\n            var vm = $scope.vm;\n            vm.unexpectedError = false;\n            vm.optionResults = [];\n            if ($routeParams.pollId != null && $routeParams.pollId !== \"\") {\n                pollService.getPoll($routeParams.pollId).then(\n                    function(serverResp) {\n                        vm.poll = serverResp.data.pollInfo;\n                        var optionNames = [];\n                        var optionVotes = [];\n                        var optionColors = [];\n                        vm.poll.options.forEach(function(option, index, optionArray) {\n                            optionNames.push(option.optionText);\n                            optionVotes.push(option.numTimesSelected);\n                            optionColors.push(rainbow(optionArray.length, index));\n                        });\n                        initBarChart(optionNames, optionVotes, optionColors);\n                        initPieChart(optionNames, optionVotes, optionColors);\n                        $timeout(function() { $scope.$apply(); });\n                    },\n                    function(serverResp) {\n                        vm.unexpectedError = true;\n                    }\n                );\n            }\n            else {\n                window.location.href = \"/404\";\n            }\n\n            function initBarChart(labels, votes, colours) {\n                var ctx = document.getElementById(\"bar-chart-results\").getContext('2d');\n                var myChart = new Chart(ctx, {\n                    type: 'bar',\n                    data: {\n                        labels: labels,\n                        datasets: [{\n                            label: '# of Votes',\n                            data: votes,\n                            backgroundColor: colours,\n                            borderWidth: 1\n                        }]\n                    },\n                    options: {\n                        scales: {\n                            yAxes: [{\n                                ticks: {\n                                    beginAtZero: true\n                                },\n                                label: '# of Votes'\n                            }]\n                        }\n                    },\n                    responsive: true\n                });\n            }\n\n            function initPieChart(labels, votes, colours) {\n                var ctx = document.getElementById(\"pie-chart-results\").getContext('2d');\n                var myChart = new Chart(ctx, {\n                    type: 'pie',\n                    data: {\n                        labels: labels,\n                        datasets: [{\n                            label: '# of Votes',\n                            data: votes,\n                            backgroundColor: colours,\n                            borderWidth: 1\n                        }]\n                    },\n                    options: {\n\n                    },\n                    responsive: true\n                });\n            }\n\n            function rainbow(numOfSteps, step) {\n                // This function generates vibrant, \"evenly spaced\" colours (i.e. no clustering). This is ideal for creating easily distinguishable vibrant markers in Google Maps and other apps.\n                // Adam Cole, 2011-Sept-14\n                // HSV to RBG adapted from: http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript\n                var r, g, b;\n                var h = step / numOfSteps;\n                var i = ~~(h * 6);\n                var f = h * 6 - i;\n                var q = 1 - f;\n                switch (i % 6) {\n                    case 0:\n                        r = 1;\n                        g = f;\n                        b = 0;\n                        break;\n                    case 1:\n                        r = q;\n                        g = 1;\n                        b = 0;\n                        break;\n                    case 2:\n                        r = 0;\n                        g = 1;\n                        b = f;\n                        break;\n                    case 3:\n                        r = 0;\n                        g = q;\n                        b = 1;\n                        break;\n                    case 4:\n                        r = f;\n                        g = 0;\n                        b = 1;\n                        break;\n                    case 5:\n                        r = 1;\n                        g = 0;\n                        b = q;\n                        break;\n                }\n                var c = \"#\" + (\"00\" + (~~(r * 255)).toString(16)).slice(-2) + (\"00\" + (~~(g * 255)).toString(16)).slice(-2) + (\"00\" + (~~(b * 255)).toString(16)).slice(-2);\n                return (c);\n            }\n\n        }]);\n}());\n","(function() {\n    angular.module(\"pollApp\")\n        .controller(\"pollViewController\", [\"$routeParams\", \"$scope\", \"$rootScope\", \"$timeout\", \"pollService\", \"notificationService\", function($routeParams, $scope, $rootScope, $timeout, pollService, notificationService) {\n            $scope.vm = {};\n\n            var vm = $scope.vm;\n\n            initViewModel();\n\n            function initViewModel() {\n\n                vm.unexpectedError = false;\n                vm.newOptionFormVisible = false;\n                vm.addNewOptionVisible = true;\n                vm.submitSelection = submitSelection;\n                vm.submitNewOption = submitNewOption;\n                vm.addNewOption = addNewOption;\n                vm.inputValidationPattern = /[a-zA-Z0-9]/;\n                vm.newPollOption = \"\";\n\n                if ($routeParams.pollId != null && $routeParams.pollId !== \"\") {\n                    pollService.getPoll($routeParams.pollId).then(getPollSuccess, requestFailure);\n                }\n                else {\n                    window.location.href = \"/404\";\n                }\n            }\n\n            function getPollSuccess(serverResp) {\n                vm.poll = serverResp.data.pollInfo;\n                vm.selectedOption = serverResp.data.userSelection ? vm.poll.options[serverResp.data.userSelection] : vm.poll.options[0];\n                vm.facebookShareLink = 'https://www.facebook.com/sharer/sharer.php?u=' + window.encodeURI(window.location.href);\n                vm.twitterShareLink = 'https://twitter.com/home?status=' + window.encodeURI(window.location.href);\n            }\n\n            function submitSelection() {\n                pollService.vote($routeParams.pollId, vm.selectedOption.optionId)\n                    .then(function(resp) {\n                        notificationService.success(\"Option Selection Successful\");\n                    });\n            }\n\n            function submitNewOption() {\n                if (!$scope.newOptionForm.newPollOption.$error.required && !$scope.newOptionForm.newPollOption.$error.pattern) {\n                    pollService.addPollOption($routeParams.pollId, vm.newPollOption).then(newOptionSuccess, requestFailure);\n                }\n            }\n\n            function newOptionSuccess(resp) {\n                vm.newOptionFormVisible = false;\n                vm.addNewOptionVisible = false;\n                vm.poll = resp.data.data;\n                notificationService.success(\"New Option Added\");\n            }\n\n            function addNewOption() {\n                if ($rootScope.loggedIn) {\n                    showNewOptionForm();\n                }\n            }\n\n            function showNewOptionForm() {\n                vm.newOptionFormVisible = true;\n                vm.addNewOptionVisible = false;\n            }\n\n            function requestFailure(resp) {\n                notificationService.error(resp.message);\n            }\n\n        }]);\n}());","(function() {\n    angular.module(\"pollApp\")\n        .controller(\"pollController\", [\"$scope\", \"pollService\", function($scope, pollService) {\n            $scope.pollArray = [];\n            pollService.getPolls(10).then(function(pollResult) {\n                $scope.pollArray = pollResult.data;\n            });\n        }]);\n}());\n","(function() {\n    angular.module(\"pollApp\")\n        .controller(\"userPollController\", [\"$scope\", \"pollService\", function($scope, pollsService) {\n            $scope.vm = {};\n            var vm = $scope.vm;\n            vm.loading = true;\n            vm.error = false;\n            vm.pollArray = [];\n\n            vm.generateStatsLink = generateStatsLink;\n\n            vm.generateEditLink = generateEditLink;\n\n            initData();\n\n            function initData() {\n                pollsService.getUserPolls().then(successResp, errorResp);\n            }\n\n            function successResp(resp) {\n                vm.pollArray = resp.data;\n                vm.loading = false;\n            }\n\n            function errorResp(resp) {\n                if (resp.status === 401 || resp.status === 403) {\n                    window.location.href = \"/#!/login\";\n                }\n            }\n\n            function generateEditLink(pollId) {\n                return '#!editPoll/' + pollId;\n            }\n\n            function generateStatsLink(pollId) {\n                return '#!pollStats/' + pollId;\n            }\n\n        }]);\n}());\n","(function() {\n    angular.module(\"pollApp\")\n        .service(\"loginService\", [\"$rootScope\", \"$http\", function($rootScope, $http) {\n            var self = this;\n\n            self.login = login;\n\n            self.logout = logout;\n\n            self.isLoggedIn = isLoggedIn;\n\n            function login() {\n                return $http.get(\"/auth/github\");\n            }\n\n            function logout() {\n                return $http.get(\"/logout\");\n            }\n\n            function isLoggedIn() {\n                return $http.get(\"/isLoggedIn\");\n            }\n\n            return self;\n        }]);\n}());","(function(){\n    angular.module(\"pollApp\")\n    .service(\"notificationService\", [\"toastr\", function(toastr){\n        return {\n          success: successFunction,\n          error: errorFunction,\n          warn: warnFunction\n        };\n        \n        function successFunction(msg){\n            toastr.success(msg);\n        }\n        \n        function errorFunction(msg){\n            toastr.error(msg);\n        }\n        \n        function warnFunction(msg){\n            toastr.warning(msg);\n        }\n        \n    }]);\n}());","(function() {\n    angular.module(\"pollApp\")\n        .service(\"pollService\", [\"$http\", function($http) {\n            var self = this;\n\n            self.getPoll = function(id) {\n                var url = \"/poll/\" + id;\n                return $http({\n                    method: \"GET\",\n                    url: url\n                });\n            };\n\n            self.getPolls = function(numItems) {\n                var requestObj = { \"numItems\": numItems };\n                return $http({\n                    method: \"GET\",\n                    url: \"/polls\",\n                    params: requestObj\n                });\n            };\n\n            self.getUserPolls = function(userId) {\n                return $http({\n                    method: \"GET\",\n                    url: \"/userPolls\"\n                });\n            };\n\n            self.createPoll = function(pollObj) {\n                var requestData = pollObj;\n                return $http({\n                    method: \"POST\",\n                    url: \"/addPoll\",\n                    data: requestData\n                });\n            };\n\n            self.editPoll = function(pollObj) {\n                var requestData = pollObj;\n                return $http({\n                    method: \"POST\",\n                    url: \"/addPoll\",\n                    data: requestData\n                });\n            };\n\n            self.addPollOption = function(pollId, optionText) {\n                var requestData = {\n                    \"pollId\": pollId,\n                    \"optionText\": optionText\n                };\n\n                return $http({\n                    method: \"POST\",\n                    url: \"/addPollOption\",\n                    data: requestData,\n                    type: \"application/json\"\n                });\n            }\n\n            self.vote = function(pollId, optionId) {\n                var requestData = {\n                    \"pollId\": pollId,\n                    \"optionId\": optionId\n                };\n                return $http({\n                    method: \"POST\",\n                    url: \"/vote\",\n                    data: requestData,\n                    type: \"application/json\"\n                });\n            };\n\n            return self;\n        }]);\n}());\n","(function() {\n    angular.module(\"pollApp\")\n        .service(\"userService\", [\"$http\", function($http) {\n            var self = this;\n\n            self.getUserInfo = getUserInfo;\n\n            function getUserInfo() {\n                var url = \"/getUserInfo\";\n                return $http({\n                    method: \"GET\",\n                    url: url\n                });\n            }\n\n            return self;\n        }]);\n}());\n","var OptionModel = function(optionId, optionText, numTimesSelected){\n    this.optionId = optionId;\n    this.optionText = optionText;\n    this.numTimesSelected = numTimesSelected || 0;\n};\n\nif (typeof module !== \"undefined\" && module.exports) {\n    module.exports = OptionModel;\n}\nelse if (typeof angular !== \"undefined\"){\n    angular.module(\"pollApp\")\n        .factory(\"OptionModel\", function(){ return OptionModel });\n}","var PollOptionModel;\nif (typeof require !== \"undefined\") {\n    PollOptionModel = require('./option.js');\n}\nelse{\n    PollOptionModel = OptionModel || function(){};\n}\nvar PollModel = function(name, description, creatorId, creatorUserName, options) {\n    var self = this;\n    this.name = name;\n    this.description = description;\n    this.creator = { id: creatorId, userName: creatorUserName };\n    this.options = initializeOptions(options);\n\n    function initializeOptions(initOptions) {\n        var result = [];\n        initOptions.forEach(function(initOption) {\n            result.push(new PollOptionModel(initOption.optionId, initOption.optionText, initOption.numTimesSelected));\n        });\n        return result;\n    }\n};\n\nif (typeof module !== \"undefined\" && module.exports) {\n    module.exports = PollModel;\n}\nelse if (typeof angular !== \"undefined\"){\n    angular.module(\"pollApp\")\n        .factory(\"PollModel\", function(){ return PollModel; });\n}","var PollInfo = function(pollId, pollName) {\n    this.id = pollId;\n    this.name = pollName;\n};\n\nif (typeof module !== \"undefined\" && module.exports) {\n    module.exports = PollInfo;\n}\nelse if (typeof angular !== \"undefined\"){\n    angular.module(\"pollApp\")\n        .factory(\"PollInfo\", function(){ return PollInfo; });\n}","var UserSelection = function(userId, uuid, userOption) {\n    this.userId = userId;\n    this.uuid = uuid;\n    this.optionId = userOption;\n};\n\nif (typeof module !== \"undefined\" && module.exports) {\n    module.exports = UserSelection;\n}\nelse if (typeof angular !== \"undefined\"){\n    angular.module(\"pollApp\")\n        .factory(\"UserSelection\", function(){ return UserSelection;});\n}"]}