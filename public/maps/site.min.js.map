{"version":3,"sources":["app.js","constants/appConstants.js","controllers/createEditPollController.js","controllers/loginController.js","controllers/menuController.js","controllers/pollStatsController.js","controllers/pollViewController.js","controllers/pollsController.js","controllers/userPollsController.js","services/chartService.js","services/loginService.js","services/notificationService.js","services/pollsService.js","services/userService.js","option.js","poll.js","pollInfo.js","userSelection.js"],"names":["angular","module","run","$rootScope","$location","loginService","notificationService","appConstants","loading","loggedIn","isLoggedIn","then","resp","data","status","$on","event","next","current","$$route","restrictedRoutes","indexOf","originalPath","path","warn","config","$routeProvider","when","templateUrl","controller","createEdit","createEditEnum","create","edit","otherwise","constant","$scope","$timeout","$route","$routeParams","OptionModel","PollModel","pollService","successfulPollCreation","res","success","window","location","pollId","successfulDeletion","failedRequest","href","error","message","pollObject","pollName","pollDescription","pollOptions","call","this","vm","addOptionError","isEditing","addOption","allOptionsNonEmpty","index","length","optionText","validateOptions","pollOptionId","push","optionId","removeOption","splice","forEach","option","submitPoll","createPollForm","$valid","$","modal","editPoll","pollTitle","createPoll","deletePoll","getPoll","serverResp","pollInfo","id","name","description","options","submitText","console","loginSuccess","loginFail","logInWithGit","login","showError","Boolean","errorMessage","logOutSuccess","failResp","menuVm","logOut","logout","chartService","unexpectedError","optionResults","poll","optionNames","optionVotes","optionArray","numTimesSelected","initBarChart","initPieChart","getPollSuccess","map","selectedOption","userSelection","facebookShareLink","encodeURI","twitterShareLink","submitSelection","vote","submitNewOption","newOptionForm","newPollOption","$error","required","pattern","addPollOption","newOptionSuccess","requestFailure","newOptionFormVisible","addNewOptionVisible","addNewOption","inputValidationPattern","pollArray","getPolls","pollResult","pollsService","successResp","errorResp","generateStatsLink","generateEditLink","getUserPolls","service","rainbow","numOfSteps","step","r","g","b","h","i","f","q","toString","slice","labels","votes","ctx","document","getElementById","getContext","colours","item","labelArray","Chart","type","datasets","label","backgroundColor","borderWidth","scales","yAxes","ticks","beginAtZero","responsive","$http","get","toastr","msg","warning","method","url","numItems","params","userId","pollObj","pollData","getUserInfo","exports","factory","PollOptionModel","require","creatorId","creatorUserName","creator","userName","initOptions","result","initOption","initializeOptions","PollInfo","UserSelection","uuid","userOption"],"mappings":"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","file":"../js/site.min.js","sourcesContent":["(function() {\n    angular.module(\"pollApp\", [\"ngRoute\", \"toastr\"])\n        .run([\"$rootScope\", \"$location\", \"loginService\", \"notificationService\", \"appConstants\", function($rootScope, $location, loginService, notificationService, appConstants) {\n\n            $rootScope.loading = true;\n            $rootScope.loggedIn = false;\n\n            loginService.isLoggedIn().then(successResp, notLoggedInResp);\n\n            $rootScope.$on(\"$routeChangeStart\", function(event, next, current) {\n                if ($rootScope.loggedIn) {\n                    return;\n                }\n                else if (next.$$route && appConstants.restrictedRoutes.indexOf(next.$$route.originalPath) > -1) {\n                    $location.path(\"/login\");\n                    notificationService.warn(\"You must log in to access this part of the site\");\n                }\n            });\n\n            function successResp(resp) {\n                $rootScope.loggedIn = resp.data.status;\n                $rootScope.loading = false;\n            }\n\n            function notLoggedInResp(resp) {\n                $rootScope.loggedIn = false;\n                $rootScope.loading = false;\n            }\n        }])\n        .config([\"$routeProvider\", \"appConstants\", function($routeProvider, appConstants) {\n            $routeProvider\n                .when(\"/viewPoll/:pollId\", {\n                    templateUrl: \"/public/js/app/templates/poll.html\",\n                    controller: \"pollViewController\"\n                })\n                .when(\"/createPoll\", {\n                    templateUrl: \"/public/js/app/templates/createEditPoll.html\",\n                    controller: \"createEditPollController\",\n                    createEdit: appConstants.createEditEnum.create\n                })\n                .when(\"/editPoll/:pollId\", {\n                    templateUrl: \"/public/js/app/templates/createEditPoll.html\",\n                    controller: \"createEditPollController\",\n                    createEdit: appConstants.createEditEnum.edit\n                })\n                .when(\"/pollStats/:pollId\", {\n                    templateUrl: \"/public/js/app/templates/pollStats.html\",\n                    controller: \"pollStatsController\",\n                })\n                .when(\"/myPolls\", {\n                    templateUrl: \"/public/js/app/templates/userPolls.html\",\n                    controller: \"userPollController\",\n                })\n                .when(\"/login\", {\n                    templateUrl: \"/public/js/app/templates/login.html\",\n                    controller: \"loginController\"\n                })\n                .otherwise({\n                    templateUrl: \"/public/js/app/templates/home.html\",\n                    controller: \"pollController\"\n                });\n        }]);\n}());","(function() {\n    angular.module(\"pollApp\")\n        .constant(\"appConstants\", {\n            createEditEnum: {\n                create: 0,\n                edit: 1\n            },\n            restrictedRoutes: [\"/myPolls\", \"/createPoll\", \"/pollStats\", \"/editPoll\"]\n        });\n}());","(function() {\n    angular.module(\"pollApp\")\n        .controller(\"createEditPollController\", [\"$scope\", \"$timeout\", \"$route\", \"$routeParams\", \"OptionModel\", \"PollModel\", \"pollService\", \"appConstants\", \"notificationService\", createEditPollController]);\n\n    function createEditPollController($scope, $timeout, $route, $routeParams, OptionModel, PollModel, pollService, appConstants, notificationService) {\n        $scope.vm = {};\n        var vm = $scope.vm;\n        vm.addOptionError = false;\n        vm.isEditing = false;\n\n        vm.addOption = addOption;\n        vm.removeOption = removeOption;\n        vm.submitPoll = submitPoll;\n        vm.deletePoll = deletePoll;\n\n        initData();\n\n        function initData() {\n            if ($route.current.$$route.createEdit === appConstants.createEditEnum.edit) {\n                vm.isEditing = true;\n                pollService.getPoll($routeParams.pollId).then(\n                    function(serverResp) {\n                        vm.pollId = serverResp.data.pollInfo.id\n                        vm.pollTitle = serverResp.data.pollInfo.name\n                        vm.pollDescription = serverResp.data.pollInfo.description;\n                        vm.pollOptions = serverResp.data.pollInfo.options;\n                        vm.submitText = \"Update Poll\";\n                    },\n                    function(serverResp) {\n                        console.error(serverResp);\n                        window.location.href = \"/#!/404\";\n                    }\n                );\n            }\n            else {\n                vm.pollTitle = \"\";\n                vm.pollDescription = \"\";\n                vm.pollId = null;\n                vm.pollOptions = [new OptionModel(0, \"\", 0)];\n                vm.submitText = \"Create Poll\";\n            }\n        }\n\n        function addOption() {\n            var allOptionsNonEmpty = validateOptions();\n\n            vm.addOptionError = false;\n\n            if (vm.pollOptions.length === 0 || allOptionsNonEmpty) {\n                var pollOptionId = vm.pollOptions.length;\n                vm.pollOptions.push({ optionId: pollOptionId, optionText: \"\" });\n            }\n            else {\n                vm.addOptionError = true;\n                notificationService.error(\"Form error. Please ensure the form fields are filled correctly\");\n            }\n        }\n\n        function removeOption(optionId) {\n            vm.pollOptions.splice(optionId, 1);\n            vm.pollOptions.forEach(function(option, index) {\n                option.optionId = index;\n            });\n        }\n\n        function submitPoll() {\n            if (vm.pollOptions.length > 1 && $route.current.$$route.createEdit === appConstants.createEditEnum.edit && $scope.createPollForm.$valid) {\n                $(\"#confirmEditModal\").modal(\"hide\");\n                pollService.editPoll($routeParams.pollId, new pollObject(vm.pollId, vm.pollTitle, vm.pollDescription, vm.pollOptions))\n                    .then(successfulPollCreation, failedRequest);\n            }\n            else if (vm.pollOptions.length > 1 && vm.pollTitle && $scope.createPollForm.$valid) {\n                pollService.createPoll(new pollObject(vm.pollId, vm.pollTitle, vm.pollDescription, vm.pollOptions))\n                    .then(successfulPollCreation, failedRequest);\n            }\n            else {\n                notificationService.error(\"Form Error. Please ensure the form fields are filled correctly.\");\n            }\n        }\n\n        function deletePoll() {\n            $(\"#confirmDeleteModal\").modal(\"hide\");\n            pollService.deletePoll($routeParams.pollId).then(successfulDeletion, failedRequest);\n        }\n\n        function successfulPollCreation(res) {\n            if ($route.current.$$route.createEdit === appConstants.createEditEnum.edit) {\n                notificationService.success(\"Poll Successfully Edited!\")\n            }\n            else {\n                notificationService.success(\"Poll Successfully Created!\")\n            }\n            window.location = \"/#!/viewPoll/\" + res.data.pollId;\n        }\n\n        function successfulDeletion(res) {\n            notificationService.success(\"Poll Deleted!\");\n            window.location = \"/#!/home\";\n        }\n\n        function failedRequest(res) {\n            if (res.status === 401 || res.status === 403) {\n                window.location.href = \"/#!/login\";\n            }\n            else {\n                notificationService.error(res.message);\n            }\n        }\n\n        function validateOptions() {\n            for (var index = 0; index < vm.pollOptions.length; index++) {\n                if (!vm.pollOptions[index].optionText) {\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        function pollObject(pollId, pollName, pollDescription, pollOptions) {\n            PollModel.call(this, pollName, pollDescription, \"\", \"\", pollOptions)\n            this.pollId = pollId;\n        }\n\n        function scopeApply() {\n            $timeout(function() { $scope.$apply(); });\n        }\n\n    }\n}());\n","(function() {\n    angular.module(\"pollApp\")\n        .controller(\"loginController\", [\"$scope\", \"$rootScope\", \"$route\", \"$routeParams\", \"loginService\", function($scope, $rootScope, $route, $routeParams, loginService) {\n            $scope.vm = {};\n            var vm = $scope.vm;\n            vm.logInWithGit = logInWithGit;\n            vm.showError = Boolean($routeParams.error);\n            vm.errorMessage = \"Login Failed, Please Try Again\";\n\n            function logInWithGit() {\n                loginService.login().then(loginSuccess, loginFail);\n            }\n\n            function loginSuccess(resp) {\n                //This is effectively never hit\n            }\n\n            function loginFail(resp) {\n                vm.error = true;\n            }\n\n        }]);\n}());\n","(function() {\n    angular.module(\"pollApp\")\n        .controller(\"menuController\", [\"$scope\", \"$rootScope\", \"loginService\", function($scope, $rootScope, loginService) {\n\n            var menuVm = $scope.menuVm = {};\n\n            menuVm.logOut = logOut;\n\n            function logOut() {\n                loginService.logout().then(logOutSuccess, failResp);\n            }\n\n            function logOutSuccess() {\n                $rootScope.loggedIn = false;\n                window.location.href = \"/\";\n            }\n\n            function failResp() {\n                $rootScope.error = true;\n            }\n\n        }]);\n}());\n","(function() {\n    angular.module(\"pollApp\")\n        .controller(\"pollStatsController\", [\"$routeParams\", \"$scope\", \"$timeout\", \"chartService\", \"pollService\", function($routeParams, $scope, $timeout, chartService, pollService) {\n            $scope.vm = {};\n            var vm = $scope.vm;\n            vm.unexpectedError = false;\n            vm.optionResults = [];\n            if ($routeParams.pollId != null && $routeParams.pollId !== \"\") {\n                pollService.getPoll($routeParams.pollId).then(\n                    function(serverResp) {\n                        vm.poll = serverResp.data.pollInfo;\n                        var optionNames = [];\n                        var optionVotes = [];\n\n                        vm.poll.options.forEach(function(option, index, optionArray) {\n                            optionNames.push(option.optionText);\n                            optionVotes.push(option.numTimesSelected);\n                        });\n                        chartService.initBarChart(\"bar-chart-results\", optionNames, optionVotes);\n                        chartService.initPieChart(\"pie-chart-results\", optionNames, optionVotes);\n                    },\n                    function(serverResp) {\n                        vm.unexpectedError = true;\n                    }\n                );\n            }\n            else {\n                window.location.href = \"/404\";\n            }\n\n        }]);\n}());\n","(function() {\n    angular.module(\"pollApp\")\n        .controller(\"pollViewController\", [\"$routeParams\", \"$scope\", \"$rootScope\", \"$timeout\", \"chartService\", \"pollService\", \"notificationService\", function($routeParams, $scope, $rootScope, $timeout, chartService, pollService, notificationService) {\n            $scope.vm = {};\n\n            var vm = $scope.vm;\n\n            initViewModel();\n\n            function initViewModel() {\n\n                vm.unexpectedError = false;\n                vm.newOptionFormVisible = false;\n                vm.addNewOptionVisible = true;\n                vm.submitSelection = submitSelection;\n                vm.submitNewOption = submitNewOption;\n                vm.addNewOption = addNewOption;\n                vm.inputValidationPattern = /[a-zA-Z0-9]/;\n                vm.newPollOption = \"\";\n\n                if ($routeParams.pollId != null && $routeParams.pollId !== \"\") {\n                    pollService.getPoll($routeParams.pollId).then(getPollSuccess, requestFailure);\n                }\n                else {\n                    window.location.href = \"/404\";\n                }\n            }\n\n            function getPollSuccess(serverResp) {\n                var optionNames = serverResp.data.pollInfo.options.map(function(option){\n                    return option.optionText;\n                }),\n                optionVotes = serverResp.data.pollInfo.options.map(function(option){\n                    return option.numTimesSelected;\n                });;\n                \n                vm.poll = serverResp.data.pollInfo;\n                vm.selectedOption = serverResp.data.userSelection ? vm.poll.options[serverResp.data.userSelection] : vm.poll.options[0];\n                vm.facebookShareLink = 'https://www.facebook.com/sharer/sharer.php?u=' + window.encodeURI(window.location.href);\n                vm.twitterShareLink = 'https://twitter.com/home?status=' + window.encodeURI(window.location.href);\n                \n                chartService.initPieChart(\"pie-chart-results\", optionNames, optionVotes);\n            }\n            \n            function submitSelection() {\n                pollService.vote($routeParams.pollId, vm.selectedOption.optionId)\n                    .then(function(resp) {\n                        notificationService.success(\"Option Selection Successful\");\n                    });\n            }\n\n            function submitNewOption() {\n                if (!$scope.newOptionForm.newPollOption.$error.required && !$scope.newOptionForm.newPollOption.$error.pattern) {\n                    pollService.addPollOption($routeParams.pollId, vm.newPollOption).then(newOptionSuccess, requestFailure);\n                }\n            }\n\n            function newOptionSuccess(resp) {\n                vm.newOptionFormVisible = false;\n                vm.addNewOptionVisible = false;\n                vm.poll = resp.data.data;\n                notificationService.success(\"New Option Added\");\n            }\n\n            function addNewOption() {\n                if ($rootScope.loggedIn) {\n                    showNewOptionForm();\n                }\n            }\n\n            function showNewOptionForm() {\n                vm.newOptionFormVisible = true;\n                vm.addNewOptionVisible = false;\n            }\n\n            function requestFailure(resp) {\n                notificationService.error(resp.message);\n            }\n\n        }]);\n}());","(function() {\n    angular.module(\"pollApp\")\n        .controller(\"pollController\", [\"$scope\", \"pollService\", function($scope, pollService) {\n            $scope.pollArray = [];\n            pollService.getPolls(10).then(function(pollResult) {\n                $scope.pollArray = pollResult.data;\n            });\n        }]);\n}());\n","(function() {\n    angular.module(\"pollApp\")\n        .controller(\"userPollController\", [\"$scope\", \"pollService\", function($scope, pollsService) {\n            $scope.vm = {};\n            var vm = $scope.vm;\n            vm.loading = true;\n            vm.error = false;\n            vm.pollArray = [];\n\n            vm.generateStatsLink = generateStatsLink;\n\n            vm.generateEditLink = generateEditLink;\n\n            initData();\n\n            function initData() {\n                pollsService.getUserPolls().then(successResp, errorResp);\n            }\n\n            function successResp(resp) {\n                vm.pollArray = resp.data;\n                vm.loading = false;\n            }\n\n            function errorResp(resp) {\n                if (resp.status === 401 || resp.status === 403) {\n                    window.location.href = \"/#!/login\";\n                }\n            }\n\n            function generateEditLink(pollId) {\n                return '#!editPoll/' + pollId;\n            }\n\n            function generateStatsLink(pollId) {\n                return '#!pollStats/' + pollId;\n            }\n\n        }]);\n}());\n","(function() {\n    angular.module(\"pollApp\")\n        .service(\"chartService\", function() {\n\n            return {\n                initBarChart: initBarChart,\n                initPieChart: initPieChart\n            };\n\n            function initBarChart(id, labels, votes) {\n                var ctx = document.getElementById(id).getContext('2d'),\n                    colours = [],\n                    myChart;\n\n                labels.forEach(function(item, index, labelArray) {\n                    colours.push(rainbow(labelArray.length, index));\n                });\n\n                myChart = new Chart(ctx, {\n                    type: 'bar',\n                    data: {\n                        labels: labels,\n                        datasets: [{\n                            label: '# of Votes',\n                            data: votes,\n                            backgroundColor: colours,\n                            borderWidth: 1\n                        }]\n                    },\n                    options: {\n                        scales: {\n                            yAxes: [{\n                                ticks: {\n                                    beginAtZero: true\n                                },\n                                label: '# of Votes'\n                            }]\n                        }\n                    },\n                    responsive: true\n                });\n            }\n\n            function initPieChart(id, labels, votes) {\n                var ctx = document.getElementById(id).getContext('2d'),\n                    colours = [],\n                    myChart;\n\n                labels.forEach(function(item, index, labelArray) {\n                    colours.push(rainbow(labelArray.length, index));\n                });\n\n                myChart = new Chart(ctx, {\n                    type: 'pie',\n                    data: {\n                        labels: labels,\n                        datasets: [{\n                            label: '# of Votes',\n                            data: votes,\n                            backgroundColor: colours,\n                            borderWidth: 1\n                        }]\n                    },\n                    options: {\n\n                    },\n                    responsive: true\n                });\n            }\n\n            function rainbow(numOfSteps, step) {\n                // This function generates vibrant, \"evenly spaced\" colours (i.e. no clustering). This is ideal for creating easily distinguishable vibrant markers in Google Maps and other apps.\n                // Adam Cole, 2011-Sept-14\n                // HSV to RBG adapted from: http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript\n                var r, g, b;\n                var h = step / numOfSteps;\n                var i = ~~(h * 6);\n                var f = h * 6 - i;\n                var q = 1 - f;\n                switch (i % 6) {\n                    case 0:\n                        r = 1;\n                        g = f;\n                        b = 0;\n                        break;\n                    case 1:\n                        r = q;\n                        g = 1;\n                        b = 0;\n                        break;\n                    case 2:\n                        r = 0;\n                        g = 1;\n                        b = f;\n                        break;\n                    case 3:\n                        r = 0;\n                        g = q;\n                        b = 1;\n                        break;\n                    case 4:\n                        r = f;\n                        g = 0;\n                        b = 1;\n                        break;\n                    case 5:\n                        r = 1;\n                        g = 0;\n                        b = q;\n                        break;\n                }\n                var c = \"#\" + (\"00\" + (~~(r * 255)).toString(16)).slice(-2) + (\"00\" + (~~(g * 255)).toString(16)).slice(-2) + (\"00\" + (~~(b * 255)).toString(16)).slice(-2);\n                return (c);\n            }\n        });\n}());","(function() {\n    angular.module(\"pollApp\")\n        .service(\"loginService\", [\"$rootScope\", \"$http\", function($rootScope, $http) {\n            var self = this;\n\n            self.login = login;\n\n            self.logout = logout;\n\n            self.isLoggedIn = isLoggedIn;\n\n            function login() {\n                return $http.get(\"/auth/github\");\n            }\n\n            function logout() {\n                return $http.get(\"/logout\");\n            }\n\n            function isLoggedIn() {\n                return $http.get(\"/isLoggedIn\");\n            }\n\n            return self;\n        }]);\n}());","(function(){\n    angular.module(\"pollApp\")\n    .service(\"notificationService\", [\"toastr\", function(toastr){\n        return {\n          success: successFunction,\n          error: errorFunction,\n          warn: warnFunction\n        };\n        \n        function successFunction(msg){\n            toastr.success(msg);\n        }\n        \n        function errorFunction(msg){\n            toastr.error(msg);\n        }\n        \n        function warnFunction(msg){\n            toastr.warning(msg);\n        }\n        \n    }]);\n}());","(function() {\n    angular.module(\"pollApp\")\n        .service(\"pollService\", [\"$http\", function($http) {\n            var self = this;\n\n            self.getPoll = function(id) {\n                var url = \"/poll/\" + id;\n                return $http({\n                    method: \"GET\",\n                    url: url\n                });\n            };\n\n            self.getPolls = function(numItems) {\n                var requestObj = { \"numItems\": numItems };\n                return $http({\n                    method: \"GET\",\n                    url: \"/polls\",\n                    params: requestObj\n                });\n            };\n\n            self.getUserPolls = function(userId) {\n                return $http({\n                    method: \"GET\",\n                    url: \"/userPolls\"\n                });\n            };\n\n            self.createPoll = function(pollObj) {\n                var requestData = pollObj;\n                return $http({\n                    method: \"POST\",\n                    url: \"/addPoll\",\n                    data: requestData\n                });\n            };\n\n            self.editPoll = function(pollId, pollObj) {\n                var requestData = {\n                    \"pollId\": pollId,\n                    \"pollData\": pollObj\n                };\n                return $http({\n                    method: \"POST\",\n                    url: \"/editPoll\",\n                    data: requestData\n                });\n            };\n\n            self.deletePoll = function(pollId) {\n                var requestData = {\n                    \"pollId\": pollId,\n                };\n                return $http({\n                    method: \"POST\",\n                    url: \"/deletePoll\",\n                    data: requestData\n                });\n            };\n\n            self.addPollOption = function(pollId, optionText) {\n                var requestData = {\n                    \"pollId\": pollId,\n                    \"optionText\": optionText\n                };\n\n                return $http({\n                    method: \"POST\",\n                    url: \"/addPollOption\",\n                    data: requestData,\n                    type: \"application/json\"\n                });\n            }\n\n            self.vote = function(pollId, optionId) {\n                var requestData = {\n                    \"pollId\": pollId,\n                    \"optionId\": optionId\n                };\n                return $http({\n                    method: \"POST\",\n                    url: \"/vote\",\n                    data: requestData,\n                    type: \"application/json\"\n                });\n            };\n\n            return self;\n        }]);\n}());\n","(function() {\n    angular.module(\"pollApp\")\n        .service(\"userService\", [\"$http\", function($http) {\n            var self = this;\n\n            self.getUserInfo = getUserInfo;\n\n            function getUserInfo() {\n                var url = \"/getUserInfo\";\n                return $http({\n                    method: \"GET\",\n                    url: url\n                });\n            }\n\n            return self;\n        }]);\n}());\n","var OptionModel = function(optionId, optionText, numTimesSelected){\n    this.optionId = optionId;\n    this.optionText = optionText;\n    this.numTimesSelected = numTimesSelected || 0;\n};\n\nif (typeof module !== \"undefined\" && module.exports) {\n    module.exports = OptionModel;\n}\nelse if (typeof angular !== \"undefined\"){\n    angular.module(\"pollApp\")\n        .factory(\"OptionModel\", function(){ return OptionModel });\n}","var PollOptionModel;\nif (typeof require !== \"undefined\") {\n    PollOptionModel = require('./option.js');\n}\nelse{\n    PollOptionModel = OptionModel || function(){};\n}\nvar PollModel = function(name, description, creatorId, creatorUserName, options) {\n    var self = this;\n    this.name = name;\n    this.description = description;\n    this.creator = { id: creatorId, userName: creatorUserName };\n    this.options = initializeOptions(options);\n\n    function initializeOptions(initOptions) {\n        var result = [];\n        initOptions.forEach(function(initOption) {\n            result.push(new PollOptionModel(initOption.optionId, initOption.optionText, initOption.numTimesSelected));\n        });\n        return result;\n    }\n};\n\nif (typeof module !== \"undefined\" && module.exports) {\n    module.exports = PollModel;\n}\nelse if (typeof angular !== \"undefined\"){\n    angular.module(\"pollApp\")\n        .factory(\"PollModel\", function(){ return PollModel; });\n}","var PollInfo = function(pollId, pollName) {\n    this.id = pollId;\n    this.name = pollName;\n};\n\nif (typeof module !== \"undefined\" && module.exports) {\n    module.exports = PollInfo;\n}\nelse if (typeof angular !== \"undefined\"){\n    angular.module(\"pollApp\")\n        .factory(\"PollInfo\", function(){ return PollInfo; });\n}","var UserSelection = function(userId, uuid, userOption) {\n    this.userId = userId;\n    this.uuid = uuid;\n    this.optionId = userOption;\n};\n\nif (typeof module !== \"undefined\" && module.exports) {\n    module.exports = UserSelection;\n}\nelse if (typeof angular !== \"undefined\"){\n    angular.module(\"pollApp\")\n        .factory(\"UserSelection\", function(){ return UserSelection;});\n}"]}