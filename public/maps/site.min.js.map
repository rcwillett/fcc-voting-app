{"version":3,"sources":["app.js","constants/appConstants.js","services/loginService.js","services/notificationService.js","services/pollsService.js","services/userService.js","controllers/createEditPollController.js","controllers/loginController.js","controllers/menuController.js","controllers/pollStatsController.js","controllers/pollViewController.js","controllers/pollsController.js","controllers/userPollsController.js","option.js","poll.js","pollInfo.js","userSelection.js"],"names":["angular","module","run","$rootScope","$location","loginService","notificationService","appConstants","loading","loggedIn","isLoggedIn","then","resp","data","status","$on","event","next","current","$$route","restrictedRoutes","indexOf","originalPath","path","warn","config","$routeProvider","when","templateUrl","controller","createEdit","createEditEnum","create","edit","otherwise","constant","service","$http","this","login","get","logout","toastr","success","msg","error","warning","getPoll","id","method","url","getPolls","numItems","params","getUserPolls","userId","createPoll","pollObj","editPoll","pollId","pollData","addPollOption","optionText","type","vote","optionId","getUserInfo","$scope","$timeout","$route","$routeParams","OptionModel","PollModel","pollService","successfulPollCreation","res","window","location","failedPollCreation","href","message","pollObject","pollName","pollDescription","pollOptions","call","vm","addOptionError","addOption","allOptionsNonEmpty","index","length","validateOptions","pollOptionId","push","removeOption","splice","forEach","option","submitPoll","pollTitle","serverResp","pollInfo","name","description","options","submitText","console","loginSuccess","loginFail","logInWithGit","showError","Boolean","errorMessage","logOutSuccess","failResp","menuVm","logOut","unexpectedError","optionResults","poll","optionNames","optionVotes","optionColors","optionArray","numTimesSelected","numOfSteps","step","r","g","b","h","i","f","q","toString","slice","rainbow","labels","votes","colours","ctx","document","getElementById","getContext","Chart","datasets","label","backgroundColor","borderWidth","scales","yAxes","ticks","beginAtZero","responsive","initBarChart","initPieChart","$apply","getPollSuccess","selectedOption","userSelection","facebookShareLink","encodeURI","twitterShareLink","submitSelection","submitNewOption","newOptionForm","newPollOption","$error","required","pattern","newOptionSuccess","requestFailure","newOptionFormVisible","addNewOptionVisible","addNewOption","inputValidationPattern","pollArray","pollResult","pollsService","successResp","errorResp","generateStatsLink","generateEditLink","exports","factory","PollOptionModel","require","creatorId","creatorUserName","creator","userName","initOptions","result","initOption","initializeOptions","PollInfo","UserSelection","uuid","userOption"],"mappings":"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","file":"../js/site.min.js","sourcesContent":["(function() {\n    angular.module(\"pollApp\", [\"ngRoute\", \"toastr\"])\n        .run([\"$rootScope\", \"$location\", \"loginService\", \"notificationService\", \"appConstants\", function($rootScope, $location, loginService, notificationService, appConstants) {\n\n            $rootScope.loading = true;\n            $rootScope.loggedIn = false;\n\n            loginService.isLoggedIn().then(successResp, notLoggedInResp);\n\n            $rootScope.$on(\"$routeChangeStart\", function(event, next, current) {\n                if ($rootScope.loggedIn) {\n                    return;\n                }\n                else if (next.$$route && appConstants.restrictedRoutes.indexOf(next.$$route.originalPath) > -1) {\n                    $location.path(\"/login\");\n                    notificationService.warn(\"You must log in to access this part of the site\");\n                }\n            });\n\n            function successResp(resp) {\n                $rootScope.loggedIn = resp.data.status;\n                $rootScope.loading = false;\n            }\n\n            function notLoggedInResp(resp) {\n                $rootScope.loggedIn = false;\n                $rootScope.loading = false;\n            }\n        }])\n        .config([\"$routeProvider\", \"appConstants\", function($routeProvider, appConstants) {\n            $routeProvider\n                .when(\"/viewPoll/:pollId\", {\n                    templateUrl: \"/public/js/app/templates/poll.html\",\n                    controller: \"pollViewController\"\n                })\n                .when(\"/createPoll\", {\n                    templateUrl: \"/public/js/app/templates/createEditPoll.html\",\n                    controller: \"createEditPollController\",\n                    createEdit: appConstants.createEditEnum.create\n                })\n                .when(\"/editPoll/:pollId\", {\n                    templateUrl: \"/public/js/app/templates/createEditPoll.html\",\n                    controller: \"createEditPollController\",\n                    createEdit: appConstants.createEditEnum.edit\n                })\n                .when(\"/pollStats/:pollId\", {\n                    templateUrl: \"/public/js/app/templates/pollStats.html\",\n                    controller: \"pollStatsController\",\n                })\n                .when(\"/myPolls\", {\n                    templateUrl: \"/public/js/app/templates/userPolls.html\",\n                    controller: \"userPollController\",\n                })\n                .when(\"/login\", {\n                    templateUrl: \"/public/js/app/templates/login.html\",\n                    controller: \"loginController\"\n                })\n                .otherwise({\n                    templateUrl: \"/public/js/app/templates/home.html\",\n                    controller: \"pollController\"\n                });\n        }]);\n}());","(function() {\n    angular.module(\"pollApp\")\n        .constant(\"appConstants\", {\n            createEditEnum: {\n                create: 0,\n                edit: 1\n            },\n            restrictedRoutes: [\"/myPolls\", \"/createPoll\", \"/pollStats\", \"/editPoll\"]\n        });\n}());","(function() {\n    angular.module(\"pollApp\")\n        .service(\"loginService\", [\"$rootScope\", \"$http\", function($rootScope, $http) {\n            var self = this;\n\n            self.login = login;\n\n            self.logout = logout;\n\n            self.isLoggedIn = isLoggedIn;\n\n            function login() {\n                return $http.get(\"/auth/github\");\n            }\n\n            function logout() {\n                return $http.get(\"/logout\");\n            }\n\n            function isLoggedIn() {\n                return $http.get(\"/isLoggedIn\");\n            }\n\n            return self;\n        }]);\n}());","(function(){\n    angular.module(\"pollApp\")\n    .service(\"notificationService\", [\"toastr\", function(toastr){\n        return {\n          success: successFunction,\n          error: errorFunction,\n          warn: warnFunction\n        };\n        \n        function successFunction(msg){\n            toastr.success(msg);\n        }\n        \n        function errorFunction(msg){\n            toastr.error(msg);\n        }\n        \n        function warnFunction(msg){\n            toastr.warning(msg);\n        }\n        \n    }]);\n}());","(function() {\n    angular.module(\"pollApp\")\n        .service(\"pollService\", [\"$http\", function($http) {\n            var self = this;\n\n            self.getPoll = function(id) {\n                var url = \"/poll/\" + id;\n                return $http({\n                    method: \"GET\",\n                    url: url\n                });\n            };\n\n            self.getPolls = function(numItems) {\n                var requestObj = { \"numItems\": numItems };\n                return $http({\n                    method: \"GET\",\n                    url: \"/polls\",\n                    params: requestObj\n                });\n            };\n\n            self.getUserPolls = function(userId) {\n                return $http({\n                    method: \"GET\",\n                    url: \"/userPolls\"\n                });\n            };\n\n            self.createPoll = function(pollObj) {\n                var requestData = pollObj;\n                return $http({\n                    method: \"POST\",\n                    url: \"/addPoll\",\n                    data: requestData\n                });\n            };\n\n            self.editPoll = function(pollId, pollObj) {\n                var requestData = {\n                    \"pollId\" : pollId,\n                    \"pollData\" : pollObj\n                    };\n                return $http({\n                    method: \"POST\",\n                    url: \"/editPoll\",\n                    data: requestData\n                });\n            };\n\n            self.addPollOption = function(pollId, optionText) {\n                var requestData = {\n                    \"pollId\": pollId,\n                    \"optionText\": optionText\n                };\n\n                return $http({\n                    method: \"POST\",\n                    url: \"/addPollOption\",\n                    data: requestData,\n                    type: \"application/json\"\n                });\n            }\n\n            self.vote = function(pollId, optionId) {\n                var requestData = {\n                    \"pollId\": pollId,\n                    \"optionId\": optionId\n                };\n                return $http({\n                    method: \"POST\",\n                    url: \"/vote\",\n                    data: requestData,\n                    type: \"application/json\"\n                });\n            };\n\n            return self;\n        }]);\n}());\n","(function() {\n    angular.module(\"pollApp\")\n        .service(\"userService\", [\"$http\", function($http) {\n            var self = this;\n\n            self.getUserInfo = getUserInfo;\n\n            function getUserInfo() {\n                var url = \"/getUserInfo\";\n                return $http({\n                    method: \"GET\",\n                    url: url\n                });\n            }\n\n            return self;\n        }]);\n}());\n","(function() {\n    angular.module(\"pollApp\")\n        .controller(\"createEditPollController\", [\"$scope\", \"$timeout\", \"$route\", \"$routeParams\", \"OptionModel\", \"PollModel\", \"pollService\", \"appConstants\", \"notificationService\", createEditPollController]);\n\n    function createEditPollController($scope, $timeout, $route, $routeParams, OptionModel, PollModel, pollService, appConstants, notificationService) {\n        $scope.vm = {};\n        var vm = $scope.vm;\n        vm.addOptionError = false;\n        \n        vm.addOption = addOption;\n        vm.removeOption = removeOption;\n        vm.submitPoll = submitPoll;\n\n        initData();\n\n        function initData() {\n            if ($route.current.$$route.createEdit === appConstants.createEditEnum.edit) {\n                pollService.getPoll($routeParams.pollId).then(\n                    function(serverResp) {\n                        vm.pollId = serverResp.data.pollInfo.id\n                        vm.pollTitle = serverResp.data.pollInfo.name\n                        vm.pollDescription = serverResp.data.pollInfo.description;\n                        vm.pollOptions = serverResp.data.pollInfo.options;\n                        vm.submitText = \"Update Poll\";\n                    },\n                    function(serverResp) {\n                        console.error(serverResp);\n                        window.location.href = \"/#!/404\";\n                    }\n                );\n            }\n            else {\n                vm.pollTitle = \"\";\n                vm.pollDescription = \"\";\n                vm.pollId = null;\n                vm.pollOptions = [new OptionModel(0, \"\", 0)];\n                vm.submitText = \"Create Poll\";\n            }\n        }\n\n        function addOption() {\n            var allOptionsNonEmpty = validateOptions();\n            \n            vm.addOptionError = false;\n            \n            if (vm.pollOptions.length === 0 || allOptionsNonEmpty) {\n                var pollOptionId = vm.pollOptions.length;\n                vm.pollOptions.push({ optionId: pollOptionId, optionText: \"\" });\n            }\n            else {\n                vm.addOptionError = true;\n                notificationService.error(\"Form error. Please ensure the form fields are filled correctly\");\n            }\n        }\n\n        function removeOption(optionId) {\n            vm.pollOptions.splice(optionId, 1);\n            vm.pollOptions.forEach(function(option, index) {\n                option.optionId = index;\n            });\n        }\n\n        function submitPoll() {\n            if (vm.pollOptions.length > 1 && $route.current.$$route.createEdit === appConstants.createEditEnum.edit) {\n                pollService.editPoll($routeParams.pollId, new pollObject(vm.pollId, vm.pollTitle, vm.pollDescription, vm.pollOptions))\n                    .then(successfulPollCreation, failedPollCreation);\n            }\n            else if (vm.pollOptions.length > 1 && vm.pollTitle) {\n                pollService.createPoll(new pollObject(vm.pollId, vm.pollTitle, vm.pollDescription, vm.pollOptions))\n                    .then(successfulPollCreation, failedPollCreation);\n            }\n            else {\n                notificationService.error(\"Form Error. Please ensure the form fields are filled correctly.\");\n            }\n        }\n\n        function successfulPollCreation(res) {\n            window.location = \"/#!/viewPoll/\" + res.data.pollId;\n        }\n\n        function failedPollCreation(res) {\n            if (res.status === 401 || res.status === 403) {\n                window.location.href = \"/#!/login\";\n            }\n            else {\n                notificationService.error(res.message);\n            }\n        }\n        \n        function validateOptions(){\n            for (var index = 0; index < vm.pollOptions.length; index++){\n                if (!vm.pollOptions[index].optionText) {\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        function pollObject(pollId, pollName, pollDescription, pollOptions) {\n            PollModel.call(this, pollName, pollDescription, \"\", \"\", pollOptions)\n            this.pollId = pollId;\n        }\n\n        function scopeApply() {\n            $timeout(function() { $scope.$apply(); });\n        }\n\n    }\n}());\n","(function() {\n    angular.module(\"pollApp\")\n        .controller(\"loginController\", [\"$scope\", \"$rootScope\", \"$routeParams\", \"loginService\", function($scope, $rootScope, $routeParams, loginService) {\n            $scope.vm = {};\n            var vm = $scope.vm;\n            vm.logInWithGit = logInWithGit;\n            vm.showError = Boolean($routeParams.error);\n            vm.errorMessage = \"Login Failed, Please Try Again\";\n\n            function logInWithGit() {\n                loginService.login().then(loginSuccess, loginFail);\n            }\n\n            function loginSuccess(resp) {\n                $rootScope.loggedIn = true;\n                window.location.href = \"/\";\n            }\n\n            function loginFail(resp) {\n                vm.error = true;\n            }\n\n        }]);\n}());\n","(function() {\n    angular.module(\"pollApp\")\n        .controller(\"menuController\", [\"$scope\", \"$rootScope\", \"loginService\", function($scope, $rootScope, loginService) {\n\n            var menuVm = $scope.menuVm = {};\n\n            menuVm.logOut = logOut;\n\n            function logOut() {\n                loginService.logout().then(logOutSuccess, failResp);\n            }\n\n            function logOutSuccess() {\n                $rootScope.loggedIn = false;\n                window.location.href = \"/\";\n            }\n\n            function failResp() {\n                $rootScope.error = true;\n            }\n\n        }]);\n}());\n","(function() {\n    angular.module(\"pollApp\")\n        .controller(\"pollStatsController\", [\"$routeParams\", \"$scope\", \"$timeout\", \"pollService\", function($routeParams, $scope, $timeout, pollService) {\n            $scope.vm = {};\n            var vm = $scope.vm;\n            vm.unexpectedError = false;\n            vm.optionResults = [];\n            if ($routeParams.pollId != null && $routeParams.pollId !== \"\") {\n                pollService.getPoll($routeParams.pollId).then(\n                    function(serverResp) {\n                        vm.poll = serverResp.data.pollInfo;\n                        var optionNames = [];\n                        var optionVotes = [];\n                        var optionColors = [];\n                        vm.poll.options.forEach(function(option, index, optionArray) {\n                            optionNames.push(option.optionText);\n                            optionVotes.push(option.numTimesSelected);\n                            optionColors.push(rainbow(optionArray.length, index));\n                        });\n                        initBarChart(optionNames, optionVotes, optionColors);\n                        initPieChart(optionNames, optionVotes, optionColors);\n                        $timeout(function() { $scope.$apply(); });\n                    },\n                    function(serverResp) {\n                        vm.unexpectedError = true;\n                    }\n                );\n            }\n            else {\n                window.location.href = \"/404\";\n            }\n\n            function initBarChart(labels, votes, colours) {\n                var ctx = document.getElementById(\"bar-chart-results\").getContext('2d');\n                var myChart = new Chart(ctx, {\n                    type: 'bar',\n                    data: {\n                        labels: labels,\n                        datasets: [{\n                            label: '# of Votes',\n                            data: votes,\n                            backgroundColor: colours,\n                            borderWidth: 1\n                        }]\n                    },\n                    options: {\n                        scales: {\n                            yAxes: [{\n                                ticks: {\n                                    beginAtZero: true\n                                },\n                                label: '# of Votes'\n                            }]\n                        }\n                    },\n                    responsive: true\n                });\n            }\n\n            function initPieChart(labels, votes, colours) {\n                var ctx = document.getElementById(\"pie-chart-results\").getContext('2d');\n                var myChart = new Chart(ctx, {\n                    type: 'pie',\n                    data: {\n                        labels: labels,\n                        datasets: [{\n                            label: '# of Votes',\n                            data: votes,\n                            backgroundColor: colours,\n                            borderWidth: 1\n                        }]\n                    },\n                    options: {\n\n                    },\n                    responsive: true\n                });\n            }\n\n            function rainbow(numOfSteps, step) {\n                // This function generates vibrant, \"evenly spaced\" colours (i.e. no clustering). This is ideal for creating easily distinguishable vibrant markers in Google Maps and other apps.\n                // Adam Cole, 2011-Sept-14\n                // HSV to RBG adapted from: http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript\n                var r, g, b;\n                var h = step / numOfSteps;\n                var i = ~~(h * 6);\n                var f = h * 6 - i;\n                var q = 1 - f;\n                switch (i % 6) {\n                    case 0:\n                        r = 1;\n                        g = f;\n                        b = 0;\n                        break;\n                    case 1:\n                        r = q;\n                        g = 1;\n                        b = 0;\n                        break;\n                    case 2:\n                        r = 0;\n                        g = 1;\n                        b = f;\n                        break;\n                    case 3:\n                        r = 0;\n                        g = q;\n                        b = 1;\n                        break;\n                    case 4:\n                        r = f;\n                        g = 0;\n                        b = 1;\n                        break;\n                    case 5:\n                        r = 1;\n                        g = 0;\n                        b = q;\n                        break;\n                }\n                var c = \"#\" + (\"00\" + (~~(r * 255)).toString(16)).slice(-2) + (\"00\" + (~~(g * 255)).toString(16)).slice(-2) + (\"00\" + (~~(b * 255)).toString(16)).slice(-2);\n                return (c);\n            }\n\n        }]);\n}());\n","(function() {\n    angular.module(\"pollApp\")\n        .controller(\"pollViewController\", [\"$routeParams\", \"$scope\", \"$rootScope\", \"$timeout\", \"pollService\", \"notificationService\", function($routeParams, $scope, $rootScope, $timeout, pollService, notificationService) {\n            $scope.vm = {};\n\n            var vm = $scope.vm;\n\n            initViewModel();\n\n            function initViewModel() {\n\n                vm.unexpectedError = false;\n                vm.newOptionFormVisible = false;\n                vm.addNewOptionVisible = true;\n                vm.submitSelection = submitSelection;\n                vm.submitNewOption = submitNewOption;\n                vm.addNewOption = addNewOption;\n                vm.inputValidationPattern = /[a-zA-Z0-9]/;\n                vm.newPollOption = \"\";\n\n                if ($routeParams.pollId != null && $routeParams.pollId !== \"\") {\n                    pollService.getPoll($routeParams.pollId).then(getPollSuccess, requestFailure);\n                }\n                else {\n                    window.location.href = \"/404\";\n                }\n            }\n\n            function getPollSuccess(serverResp) {\n                vm.poll = serverResp.data.pollInfo;\n                vm.selectedOption = serverResp.data.userSelection ? vm.poll.options[serverResp.data.userSelection] : vm.poll.options[0];\n                vm.facebookShareLink = 'https://www.facebook.com/sharer/sharer.php?u=' + window.encodeURI(window.location.href);\n                vm.twitterShareLink = 'https://twitter.com/home?status=' + window.encodeURI(window.location.href);\n            }\n\n            function submitSelection() {\n                pollService.vote($routeParams.pollId, vm.selectedOption.optionId)\n                    .then(function(resp) {\n                        notificationService.success(\"Option Selection Successful\");\n                    });\n            }\n\n            function submitNewOption() {\n                if (!$scope.newOptionForm.newPollOption.$error.required && !$scope.newOptionForm.newPollOption.$error.pattern) {\n                    pollService.addPollOption($routeParams.pollId, vm.newPollOption).then(newOptionSuccess, requestFailure);\n                }\n            }\n\n            function newOptionSuccess(resp) {\n                vm.newOptionFormVisible = false;\n                vm.addNewOptionVisible = false;\n                vm.poll = resp.data.data;\n                notificationService.success(\"New Option Added\");\n            }\n\n            function addNewOption() {\n                if ($rootScope.loggedIn) {\n                    showNewOptionForm();\n                }\n            }\n\n            function showNewOptionForm() {\n                vm.newOptionFormVisible = true;\n                vm.addNewOptionVisible = false;\n            }\n\n            function requestFailure(resp) {\n                notificationService.error(resp.message);\n            }\n\n        }]);\n}());","(function() {\n    angular.module(\"pollApp\")\n        .controller(\"pollController\", [\"$scope\", \"pollService\", function($scope, pollService) {\n            $scope.pollArray = [];\n            pollService.getPolls(10).then(function(pollResult) {\n                $scope.pollArray = pollResult.data;\n            });\n        }]);\n}());\n","(function() {\n    angular.module(\"pollApp\")\n        .controller(\"userPollController\", [\"$scope\", \"pollService\", function($scope, pollsService) {\n            $scope.vm = {};\n            var vm = $scope.vm;\n            vm.loading = true;\n            vm.error = false;\n            vm.pollArray = [];\n\n            vm.generateStatsLink = generateStatsLink;\n\n            vm.generateEditLink = generateEditLink;\n\n            initData();\n\n            function initData() {\n                pollsService.getUserPolls().then(successResp, errorResp);\n            }\n\n            function successResp(resp) {\n                vm.pollArray = resp.data;\n                vm.loading = false;\n            }\n\n            function errorResp(resp) {\n                if (resp.status === 401 || resp.status === 403) {\n                    window.location.href = \"/#!/login\";\n                }\n            }\n\n            function generateEditLink(pollId) {\n                return '#!editPoll/' + pollId;\n            }\n\n            function generateStatsLink(pollId) {\n                return '#!pollStats/' + pollId;\n            }\n\n        }]);\n}());\n","var OptionModel = function(optionId, optionText, numTimesSelected){\n    this.optionId = optionId;\n    this.optionText = optionText;\n    this.numTimesSelected = numTimesSelected || 0;\n};\n\nif (typeof module !== \"undefined\" && module.exports) {\n    module.exports = OptionModel;\n}\nelse if (typeof angular !== \"undefined\"){\n    angular.module(\"pollApp\")\n        .factory(\"OptionModel\", function(){ return OptionModel });\n}","var PollOptionModel;\nif (typeof require !== \"undefined\") {\n    PollOptionModel = require('./option.js');\n}\nelse{\n    PollOptionModel = OptionModel || function(){};\n}\nvar PollModel = function(name, description, creatorId, creatorUserName, options) {\n    var self = this;\n    this.name = name;\n    this.description = description;\n    this.creator = { id: creatorId, userName: creatorUserName };\n    this.options = initializeOptions(options);\n\n    function initializeOptions(initOptions) {\n        var result = [];\n        initOptions.forEach(function(initOption) {\n            result.push(new PollOptionModel(initOption.optionId, initOption.optionText, initOption.numTimesSelected));\n        });\n        return result;\n    }\n};\n\nif (typeof module !== \"undefined\" && module.exports) {\n    module.exports = PollModel;\n}\nelse if (typeof angular !== \"undefined\"){\n    angular.module(\"pollApp\")\n        .factory(\"PollModel\", function(){ return PollModel; });\n}","var PollInfo = function(pollId, pollName) {\n    this.id = pollId;\n    this.name = pollName;\n};\n\nif (typeof module !== \"undefined\" && module.exports) {\n    module.exports = PollInfo;\n}\nelse if (typeof angular !== \"undefined\"){\n    angular.module(\"pollApp\")\n        .factory(\"PollInfo\", function(){ return PollInfo; });\n}","var UserSelection = function(userId, uuid, userOption) {\n    this.userId = userId;\n    this.uuid = uuid;\n    this.optionId = userOption;\n};\n\nif (typeof module !== \"undefined\" && module.exports) {\n    module.exports = UserSelection;\n}\nelse if (typeof angular !== \"undefined\"){\n    angular.module(\"pollApp\")\n        .factory(\"UserSelection\", function(){ return UserSelection;});\n}"]}