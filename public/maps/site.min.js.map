{"version":3,"sources":["app.js","constants/appConstants.js","services/chartService.js","services/loginService.js","services/notificationService.js","services/pollsService.js","services/userService.js","controllers/createEditPollController.js","controllers/loginController.js","controllers/menuController.js","controllers/pollStatsController.js","controllers/pollViewController.js","controllers/pollsController.js","controllers/userPollsController.js","option.js","poll.js","pollInfo.js","userSelection.js"],"names":["angular","module","run","$rootScope","$location","loginService","notificationService","appConstants","loading","loggedIn","isLoggedIn","then","resp","data","status","$on","event","next","current","$$route","restrictedRoutes","indexOf","originalPath","path","warn","config","$routeProvider","when","templateUrl","controller","createEdit","createEditEnum","create","edit","otherwise","constant","service","rainbow","numOfSteps","step","r","g","b","h","i","f","q","toString","slice","initBarChart","id","labels","votes","ctx","document","getElementById","getContext","colours","forEach","item","index","labelArray","push","length","Chart","type","datasets","label","backgroundColor","borderWidth","options","scales","yAxes","ticks","beginAtZero","responsive","initPieChart","$http","this","login","get","logout","toastr","success","msg","error","warning","getPoll","method","url","getPolls","numItems","params","getUserPolls","userId","createPoll","pollObj","editPoll","pollId","pollData","deletePoll","addPollOption","optionText","vote","optionId","getUserInfo","$scope","$timeout","$route","$routeParams","OptionModel","PollModel","pollService","successfulPollCreation","res","window","location","successfulDeletion","failedRequest","href","message","pollObject","pollName","pollDescription","pollOptions","call","vm","addOptionError","isEditing","addOption","allOptionsNonEmpty","validateOptions","pollOptionId","removeOption","splice","option","submitPoll","createPollForm","$valid","$","modal","pollTitle","serverResp","pollInfo","name","description","submitText","console","loginSuccess","loginFail","logInWithGit","showError","Boolean","errorMessage","logOutSuccess","failResp","menuVm","logOut","chartService","unexpectedError","optionResults","poll","optionNames","optionVotes","optionArray","numTimesSelected","getPollSuccess","map","selectedOption","userSelection","facebookShareLink","encodeURI","twitterShareLink","submitSelection","submitNewOption","newOptionForm","newPollOption","$error","required","pattern","newOptionSuccess","requestFailure","newOptionFormVisible","addNewOptionVisible","addNewOption","inputValidationPattern","pollArray","pollResult","pollsService","successResp","errorResp","generateStatsLink","generateEditLink","exports","factory","PollOptionModel","require","creatorId","creatorUserName","creator","userName","initOptions","result","initOption","initializeOptions","PollInfo","UserSelection","uuid","userOption"],"mappings":"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","file":"../js/site.min.js","sourcesContent":["(function() {\n    angular.module(\"pollApp\", [\"ngRoute\", \"toastr\"])\n        .run([\"$rootScope\", \"$location\", \"loginService\", \"notificationService\", \"appConstants\", function($rootScope, $location, loginService, notificationService, appConstants) {\n\n            $rootScope.loading = true;\n            $rootScope.loggedIn = false;\n\n            loginService.isLoggedIn().then(successResp, notLoggedInResp);\n\n            $rootScope.$on(\"$routeChangeStart\", function(event, next, current) {\n                if ($rootScope.loggedIn) {\n                    return;\n                }\n                else if (next.$$route && appConstants.restrictedRoutes.indexOf(next.$$route.originalPath) > -1) {\n                    $location.path(\"/login\");\n                    notificationService.warn(\"You must log in to access this part of the site\");\n                }\n            });\n\n            function successResp(resp) {\n                $rootScope.loggedIn = resp.data.status;\n                $rootScope.loading = false;\n            }\n\n            function notLoggedInResp(resp) {\n                $rootScope.loggedIn = false;\n                $rootScope.loading = false;\n            }\n        }])\n        .config([\"$routeProvider\", \"appConstants\", function($routeProvider, appConstants) {\n            $routeProvider\n                .when(\"/viewPoll/:pollId\", {\n                    templateUrl: \"/public/js/app/templates/poll.html\",\n                    controller: \"pollViewController\"\n                })\n                .when(\"/createPoll\", {\n                    templateUrl: \"/public/js/app/templates/createEditPoll.html\",\n                    controller: \"createEditPollController\",\n                    createEdit: appConstants.createEditEnum.create\n                })\n                .when(\"/editPoll/:pollId\", {\n                    templateUrl: \"/public/js/app/templates/createEditPoll.html\",\n                    controller: \"createEditPollController\",\n                    createEdit: appConstants.createEditEnum.edit\n                })\n                .when(\"/pollStats/:pollId\", {\n                    templateUrl: \"/public/js/app/templates/pollStats.html\",\n                    controller: \"pollStatsController\",\n                })\n                .when(\"/myPolls\", {\n                    templateUrl: \"/public/js/app/templates/userPolls.html\",\n                    controller: \"userPollController\",\n                })\n                .when(\"/login\", {\n                    templateUrl: \"/public/js/app/templates/login.html\",\n                    controller: \"loginController\"\n                })\n                .otherwise({\n                    templateUrl: \"/public/js/app/templates/home.html\",\n                    controller: \"pollController\"\n                });\n        }]);\n}());","(function() {\n    angular.module(\"pollApp\")\n        .constant(\"appConstants\", {\n            createEditEnum: {\n                create: 0,\n                edit: 1\n            },\n            restrictedRoutes: [\"/myPolls\", \"/createPoll\", \"/pollStats\", \"/editPoll\"]\n        });\n}());","(function() {\n    angular.module(\"pollApp\")\n        .service(\"chartService\", function() {\n\n            return {\n                initBarChart: initBarChart,\n                initPieChart: initPieChart\n            };\n\n            function initBarChart(id, labels, votes) {\n                var ctx = document.getElementById(id).getContext('2d'),\n                    colours = [],\n                    myChart;\n\n                labels.forEach(function(item, index, labelArray) {\n                    colours.push(rainbow(labelArray.length, index));\n                });\n\n                myChart = new Chart(ctx, {\n                    type: 'bar',\n                    data: {\n                        labels: labels,\n                        datasets: [{\n                            label: '# of Votes',\n                            data: votes,\n                            backgroundColor: colours,\n                            borderWidth: 1\n                        }]\n                    },\n                    options: {\n                        scales: {\n                            yAxes: [{\n                                ticks: {\n                                    beginAtZero: true\n                                },\n                                label: '# of Votes'\n                            }]\n                        }\n                    },\n                    responsive: true\n                });\n            }\n\n            function initPieChart(id, labels, votes) {\n                var ctx = document.getElementById(id).getContext('2d'),\n                    colours = [],\n                    myChart;\n\n                labels.forEach(function(item, index, labelArray) {\n                    colours.push(rainbow(labelArray.length, index));\n                });\n\n                myChart = new Chart(ctx, {\n                    type: 'pie',\n                    data: {\n                        labels: labels,\n                        datasets: [{\n                            label: '# of Votes',\n                            data: votes,\n                            backgroundColor: colours,\n                            borderWidth: 1\n                        }]\n                    },\n                    options: {\n\n                    },\n                    responsive: true\n                });\n            }\n\n            function rainbow(numOfSteps, step) {\n                // This function generates vibrant, \"evenly spaced\" colours (i.e. no clustering). This is ideal for creating easily distinguishable vibrant markers in Google Maps and other apps.\n                // Adam Cole, 2011-Sept-14\n                // HSV to RBG adapted from: http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript\n                var r, g, b;\n                var h = step / numOfSteps;\n                var i = ~~(h * 6);\n                var f = h * 6 - i;\n                var q = 1 - f;\n                switch (i % 6) {\n                    case 0:\n                        r = 1;\n                        g = f;\n                        b = 0;\n                        break;\n                    case 1:\n                        r = q;\n                        g = 1;\n                        b = 0;\n                        break;\n                    case 2:\n                        r = 0;\n                        g = 1;\n                        b = f;\n                        break;\n                    case 3:\n                        r = 0;\n                        g = q;\n                        b = 1;\n                        break;\n                    case 4:\n                        r = f;\n                        g = 0;\n                        b = 1;\n                        break;\n                    case 5:\n                        r = 1;\n                        g = 0;\n                        b = q;\n                        break;\n                }\n                var c = \"#\" + (\"00\" + (~~(r * 255)).toString(16)).slice(-2) + (\"00\" + (~~(g * 255)).toString(16)).slice(-2) + (\"00\" + (~~(b * 255)).toString(16)).slice(-2);\n                return (c);\n            }\n        });\n}());","(function() {\n    angular.module(\"pollApp\")\n        .service(\"loginService\", [\"$rootScope\", \"$http\", function($rootScope, $http) {\n            var self = this;\n\n            self.login = login;\n\n            self.logout = logout;\n\n            self.isLoggedIn = isLoggedIn;\n\n            function login() {\n                return $http.get(\"/auth/github\");\n            }\n\n            function logout() {\n                return $http.get(\"/logout\");\n            }\n\n            function isLoggedIn() {\n                return $http.get(\"/isLoggedIn\");\n            }\n\n            return self;\n        }]);\n}());","(function(){\n    angular.module(\"pollApp\")\n    .service(\"notificationService\", [\"toastr\", function(toastr){\n        return {\n          success: successFunction,\n          error: errorFunction,\n          warn: warnFunction\n        };\n        \n        function successFunction(msg){\n            toastr.success(msg);\n        }\n        \n        function errorFunction(msg){\n            toastr.error(msg);\n        }\n        \n        function warnFunction(msg){\n            toastr.warning(msg);\n        }\n        \n    }]);\n}());","(function() {\n    angular.module(\"pollApp\")\n        .service(\"pollService\", [\"$http\", function($http) {\n            var self = this;\n\n            self.getPoll = function(id) {\n                var url = \"/poll/\" + id;\n                return $http({\n                    method: \"GET\",\n                    url: url\n                });\n            };\n\n            self.getPolls = function(numItems) {\n                var requestObj = { \"numItems\": numItems };\n                return $http({\n                    method: \"GET\",\n                    url: \"/polls\",\n                    params: requestObj\n                });\n            };\n\n            self.getUserPolls = function(userId) {\n                return $http({\n                    method: \"GET\",\n                    url: \"/userPolls\"\n                });\n            };\n\n            self.createPoll = function(pollObj) {\n                var requestData = pollObj;\n                return $http({\n                    method: \"POST\",\n                    url: \"/addPoll\",\n                    data: requestData\n                });\n            };\n\n            self.editPoll = function(pollId, pollObj) {\n                var requestData = {\n                    \"pollId\": pollId,\n                    \"pollData\": pollObj\n                };\n                return $http({\n                    method: \"POST\",\n                    url: \"/editPoll\",\n                    data: requestData\n                });\n            };\n\n            self.deletePoll = function(pollId) {\n                var requestData = {\n                    \"pollId\": pollId,\n                };\n                return $http({\n                    method: \"POST\",\n                    url: \"/deletePoll\",\n                    data: requestData\n                });\n            };\n\n            self.addPollOption = function(pollId, optionText) {\n                var requestData = {\n                    \"pollId\": pollId,\n                    \"optionText\": optionText\n                };\n\n                return $http({\n                    method: \"POST\",\n                    url: \"/addPollOption\",\n                    data: requestData,\n                    type: \"application/json\"\n                });\n            }\n\n            self.vote = function(pollId, optionId) {\n                var requestData = {\n                    \"pollId\": pollId,\n                    \"optionId\": optionId\n                };\n                return $http({\n                    method: \"POST\",\n                    url: \"/vote\",\n                    data: requestData,\n                    type: \"application/json\"\n                });\n            };\n\n            return self;\n        }]);\n}());\n","(function() {\n    angular.module(\"pollApp\")\n        .service(\"userService\", [\"$http\", function($http) {\n            var self = this;\n\n            self.getUserInfo = getUserInfo;\n\n            function getUserInfo() {\n                var url = \"/getUserInfo\";\n                return $http({\n                    method: \"GET\",\n                    url: url\n                });\n            }\n\n            return self;\n        }]);\n}());\n","(function() {\n    angular.module(\"pollApp\")\n        .controller(\"createEditPollController\", [\"$scope\", \"$timeout\", \"$route\", \"$routeParams\", \"OptionModel\", \"PollModel\", \"pollService\", \"appConstants\", \"notificationService\", createEditPollController]);\n\n    function createEditPollController($scope, $timeout, $route, $routeParams, OptionModel, PollModel, pollService, appConstants, notificationService) {\n        $scope.vm = {};\n        var vm = $scope.vm;\n        vm.addOptionError = false;\n        vm.isEditing = false;\n\n        vm.addOption = addOption;\n        vm.removeOption = removeOption;\n        vm.submitPoll = submitPoll;\n        vm.deletePoll = deletePoll;\n\n        initData();\n\n        function initData() {\n            if ($route.current.$$route.createEdit === appConstants.createEditEnum.edit) {\n                vm.isEditing = true;\n                pollService.getPoll($routeParams.pollId).then(\n                    function(serverResp) {\n                        vm.pollId = serverResp.data.pollInfo.id\n                        vm.pollTitle = serverResp.data.pollInfo.name\n                        vm.pollDescription = serverResp.data.pollInfo.description;\n                        vm.pollOptions = serverResp.data.pollInfo.options;\n                        vm.submitText = \"Update Poll\";\n                    },\n                    function(serverResp) {\n                        console.error(serverResp);\n                        window.location.href = \"/#!/404\";\n                    }\n                );\n            }\n            else {\n                vm.pollTitle = \"\";\n                vm.pollDescription = \"\";\n                vm.pollId = null;\n                vm.pollOptions = [new OptionModel(0, \"\", 0)];\n                vm.submitText = \"Create Poll\";\n            }\n        }\n\n        function addOption() {\n            var allOptionsNonEmpty = validateOptions();\n\n            vm.addOptionError = false;\n\n            if (vm.pollOptions.length === 0 || allOptionsNonEmpty) {\n                var pollOptionId = vm.pollOptions.length;\n                vm.pollOptions.push({ optionId: pollOptionId, optionText: \"\" });\n            }\n            else {\n                vm.addOptionError = true;\n                notificationService.error(\"Form error. Please ensure the form fields are filled correctly\");\n            }\n        }\n\n        function removeOption(optionId) {\n            vm.pollOptions.splice(optionId, 1);\n            vm.pollOptions.forEach(function(option, index) {\n                option.optionId = index;\n            });\n        }\n\n        function submitPoll() {\n            if (vm.pollOptions.length > 1 && $route.current.$$route.createEdit === appConstants.createEditEnum.edit && $scope.createPollForm.$valid) {\n                $(\"#confirmEditModal\").modal(\"hide\");\n                pollService.editPoll($routeParams.pollId, new pollObject(vm.pollId, vm.pollTitle, vm.pollDescription, vm.pollOptions))\n                    .then(successfulPollCreation, failedRequest);\n            }\n            else if (vm.pollOptions.length > 1 && vm.pollTitle && $scope.createPollForm.$valid) {\n                pollService.createPoll(new pollObject(vm.pollId, vm.pollTitle, vm.pollDescription, vm.pollOptions))\n                    .then(successfulPollCreation, failedRequest);\n            }\n            else {\n                notificationService.error(\"Form Error. Please ensure the form fields are filled correctly.\");\n            }\n        }\n\n        function deletePoll() {\n            $(\"#confirmDeleteModal\").modal(\"hide\");\n            pollService.deletePoll($routeParams.pollId).then(successfulDeletion, failedRequest);\n        }\n\n        function successfulPollCreation(res) {\n            if ($route.current.$$route.createEdit === appConstants.createEditEnum.edit) {\n                notificationService.success(\"Poll Successfully Edited!\")\n            }\n            else {\n                notificationService.success(\"Poll Successfully Created!\")\n            }\n            window.location = \"/#!/viewPoll/\" + res.data.pollId;\n        }\n\n        function successfulDeletion(res) {\n            notificationService.success(\"Poll Deleted!\");\n            window.location = \"/#!/home\";\n        }\n\n        function failedRequest(res) {\n            if (res.status === 401 || res.status === 403) {\n                window.location.href = \"/#!/login\";\n            }\n            else {\n                notificationService.error(res.message);\n            }\n        }\n\n        function validateOptions() {\n            for (var index = 0; index < vm.pollOptions.length; index++) {\n                if (!vm.pollOptions[index].optionText) {\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        function pollObject(pollId, pollName, pollDescription, pollOptions) {\n            PollModel.call(this, pollName, pollDescription, \"\", \"\", pollOptions)\n            this.pollId = pollId;\n        }\n\n        function scopeApply() {\n            $timeout(function() { $scope.$apply(); });\n        }\n\n    }\n}());\n","(function() {\n    angular.module(\"pollApp\")\n        .controller(\"loginController\", [\"$scope\", \"$rootScope\", \"$routeParams\", \"loginService\", function($scope, $rootScope, $routeParams, loginService) {\n            $scope.vm = {};\n            var vm = $scope.vm;\n            vm.logInWithGit = logInWithGit;\n            vm.showError = Boolean($routeParams.error);\n            vm.errorMessage = \"Login Failed, Please Try Again\";\n\n            function logInWithGit() {\n                loginService.login().then(loginSuccess, loginFail);\n            }\n\n            function loginSuccess(resp) {\n                $rootScope.loggedIn = true;\n                window.location.href = \"/\";\n            }\n\n            function loginFail(resp) {\n                vm.error = true;\n            }\n\n        }]);\n}());\n","(function() {\n    angular.module(\"pollApp\")\n        .controller(\"menuController\", [\"$scope\", \"$rootScope\", \"loginService\", function($scope, $rootScope, loginService) {\n\n            var menuVm = $scope.menuVm = {};\n\n            menuVm.logOut = logOut;\n\n            function logOut() {\n                loginService.logout().then(logOutSuccess, failResp);\n            }\n\n            function logOutSuccess() {\n                $rootScope.loggedIn = false;\n                window.location.href = \"/\";\n            }\n\n            function failResp() {\n                $rootScope.error = true;\n            }\n\n        }]);\n}());\n","(function() {\n    angular.module(\"pollApp\")\n        .controller(\"pollStatsController\", [\"$routeParams\", \"$scope\", \"$timeout\", \"chartService\", \"pollService\", function($routeParams, $scope, $timeout, chartService, pollService) {\n            $scope.vm = {};\n            var vm = $scope.vm;\n            vm.unexpectedError = false;\n            vm.optionResults = [];\n            if ($routeParams.pollId != null && $routeParams.pollId !== \"\") {\n                pollService.getPoll($routeParams.pollId).then(\n                    function(serverResp) {\n                        vm.poll = serverResp.data.pollInfo;\n                        var optionNames = [];\n                        var optionVotes = [];\n\n                        vm.poll.options.forEach(function(option, index, optionArray) {\n                            optionNames.push(option.optionText);\n                            optionVotes.push(option.numTimesSelected);\n                        });\n                        chartService.initBarChart(\"bar-chart-results\", optionNames, optionVotes);\n                        chartService.initPieChart(\"pie-chart-results\", optionNames, optionVotes);\n                    },\n                    function(serverResp) {\n                        vm.unexpectedError = true;\n                    }\n                );\n            }\n            else {\n                window.location.href = \"/404\";\n            }\n\n        }]);\n}());\n","(function() {\n    angular.module(\"pollApp\")\n        .controller(\"pollViewController\", [\"$routeParams\", \"$scope\", \"$rootScope\", \"$timeout\", \"chartService\", \"pollService\", \"notificationService\", function($routeParams, $scope, $rootScope, $timeout, chartService, pollService, notificationService) {\n            $scope.vm = {};\n\n            var vm = $scope.vm;\n\n            initViewModel();\n\n            function initViewModel() {\n\n                vm.unexpectedError = false;\n                vm.newOptionFormVisible = false;\n                vm.addNewOptionVisible = true;\n                vm.submitSelection = submitSelection;\n                vm.submitNewOption = submitNewOption;\n                vm.addNewOption = addNewOption;\n                vm.inputValidationPattern = /[a-zA-Z0-9]/;\n                vm.newPollOption = \"\";\n\n                if ($routeParams.pollId != null && $routeParams.pollId !== \"\") {\n                    pollService.getPoll($routeParams.pollId).then(getPollSuccess, requestFailure);\n                }\n                else {\n                    window.location.href = \"/404\";\n                }\n            }\n\n            function getPollSuccess(serverResp) {\n                var optionNames = serverResp.data.pollInfo.options.map(function(option){\n                    return option.optionText;\n                }),\n                optionVotes = serverResp.data.pollInfo.options.map(function(option){\n                    return option.numTimesSelected;\n                });;\n                \n                vm.poll = serverResp.data.pollInfo;\n                vm.selectedOption = serverResp.data.userSelection ? vm.poll.options[serverResp.data.userSelection] : vm.poll.options[0];\n                vm.facebookShareLink = 'https://www.facebook.com/sharer/sharer.php?u=' + window.encodeURI(window.location.href);\n                vm.twitterShareLink = 'https://twitter.com/home?status=' + window.encodeURI(window.location.href);\n                \n                chartService.initPieChart(\"pie-chart-results\", optionNames, optionVotes);\n            }\n            \n            function submitSelection() {\n                pollService.vote($routeParams.pollId, vm.selectedOption.optionId)\n                    .then(function(resp) {\n                        notificationService.success(\"Option Selection Successful\");\n                    });\n            }\n\n            function submitNewOption() {\n                if (!$scope.newOptionForm.newPollOption.$error.required && !$scope.newOptionForm.newPollOption.$error.pattern) {\n                    pollService.addPollOption($routeParams.pollId, vm.newPollOption).then(newOptionSuccess, requestFailure);\n                }\n            }\n\n            function newOptionSuccess(resp) {\n                vm.newOptionFormVisible = false;\n                vm.addNewOptionVisible = false;\n                vm.poll = resp.data.data;\n                notificationService.success(\"New Option Added\");\n            }\n\n            function addNewOption() {\n                if ($rootScope.loggedIn) {\n                    showNewOptionForm();\n                }\n            }\n\n            function showNewOptionForm() {\n                vm.newOptionFormVisible = true;\n                vm.addNewOptionVisible = false;\n            }\n\n            function requestFailure(resp) {\n                notificationService.error(resp.message);\n            }\n\n        }]);\n}());","(function() {\n    angular.module(\"pollApp\")\n        .controller(\"pollController\", [\"$scope\", \"pollService\", function($scope, pollService) {\n            $scope.pollArray = [];\n            pollService.getPolls(10).then(function(pollResult) {\n                $scope.pollArray = pollResult.data;\n            });\n        }]);\n}());\n","(function() {\n    angular.module(\"pollApp\")\n        .controller(\"userPollController\", [\"$scope\", \"pollService\", function($scope, pollsService) {\n            $scope.vm = {};\n            var vm = $scope.vm;\n            vm.loading = true;\n            vm.error = false;\n            vm.pollArray = [];\n\n            vm.generateStatsLink = generateStatsLink;\n\n            vm.generateEditLink = generateEditLink;\n\n            initData();\n\n            function initData() {\n                pollsService.getUserPolls().then(successResp, errorResp);\n            }\n\n            function successResp(resp) {\n                vm.pollArray = resp.data;\n                vm.loading = false;\n            }\n\n            function errorResp(resp) {\n                if (resp.status === 401 || resp.status === 403) {\n                    window.location.href = \"/#!/login\";\n                }\n            }\n\n            function generateEditLink(pollId) {\n                return '#!editPoll/' + pollId;\n            }\n\n            function generateStatsLink(pollId) {\n                return '#!pollStats/' + pollId;\n            }\n\n        }]);\n}());\n","var OptionModel = function(optionId, optionText, numTimesSelected){\n    this.optionId = optionId;\n    this.optionText = optionText;\n    this.numTimesSelected = numTimesSelected || 0;\n};\n\nif (typeof module !== \"undefined\" && module.exports) {\n    module.exports = OptionModel;\n}\nelse if (typeof angular !== \"undefined\"){\n    angular.module(\"pollApp\")\n        .factory(\"OptionModel\", function(){ return OptionModel });\n}","var PollOptionModel;\nif (typeof require !== \"undefined\") {\n    PollOptionModel = require('./option.js');\n}\nelse{\n    PollOptionModel = OptionModel || function(){};\n}\nvar PollModel = function(name, description, creatorId, creatorUserName, options) {\n    var self = this;\n    this.name = name;\n    this.description = description;\n    this.creator = { id: creatorId, userName: creatorUserName };\n    this.options = initializeOptions(options);\n\n    function initializeOptions(initOptions) {\n        var result = [];\n        initOptions.forEach(function(initOption) {\n            result.push(new PollOptionModel(initOption.optionId, initOption.optionText, initOption.numTimesSelected));\n        });\n        return result;\n    }\n};\n\nif (typeof module !== \"undefined\" && module.exports) {\n    module.exports = PollModel;\n}\nelse if (typeof angular !== \"undefined\"){\n    angular.module(\"pollApp\")\n        .factory(\"PollModel\", function(){ return PollModel; });\n}","var PollInfo = function(pollId, pollName) {\n    this.id = pollId;\n    this.name = pollName;\n};\n\nif (typeof module !== \"undefined\" && module.exports) {\n    module.exports = PollInfo;\n}\nelse if (typeof angular !== \"undefined\"){\n    angular.module(\"pollApp\")\n        .factory(\"PollInfo\", function(){ return PollInfo; });\n}","var UserSelection = function(userId, uuid, userOption) {\n    this.userId = userId;\n    this.uuid = uuid;\n    this.optionId = userOption;\n};\n\nif (typeof module !== \"undefined\" && module.exports) {\n    module.exports = UserSelection;\n}\nelse if (typeof angular !== \"undefined\"){\n    angular.module(\"pollApp\")\n        .factory(\"UserSelection\", function(){ return UserSelection;});\n}"]}